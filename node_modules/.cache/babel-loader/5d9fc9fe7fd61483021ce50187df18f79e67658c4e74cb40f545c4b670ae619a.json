{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import{validateField,validateForm,validateTradingDates}from'../schemas/futureFormSchema';import{FutureCalculationService}from'../services/futureCalculationService';const initialFormData={symbol:'',description:'',isin:'',expirationCode:'',parentTicker:'',fullName:'',segment:'',maturityDate:'',firstTradingDate:'',lastTraadingDate:'',initialMarginAmount:0,percentageMargin:0,lotSize:0,contractMultiplier:0,tradingCurrency:'',underlyingType:'',underlyingId:0,settlementMethod:'',instrumentStatus:false,tickSize:0,tickValue:0,depositType:''};export const useFutureForm=()=>{const[state,setState]=useState({form:initialFormData,errors:{},isSubmitting:false,editMode:'tickValue',stringInputs:{tickSize:'',percentageMargin:'',initialMarginAmount:''},localInputs:{tickValue:0,contractMultiplier:0}});// Update form field with real-time validation\nconst updateField=useCallback((field,value)=>{setState(prev=>{let error='';// Validation de base du champ\nconst basicError=validateField(field,value);if(basicError){error=basicError;}else{// Validation spéciale pour les dates de trading\nif(field==='firstTradingDate'&&prev.form.lastTraadingDate){const dateError=validateTradingDates(value,prev.form.lastTraadingDate);if(dateError)error=dateError;}if(field==='lastTraadingDate'&&prev.form.firstTradingDate){const dateError=validateTradingDates(prev.form.firstTradingDate,value);if(dateError)error=dateError;}}return{...prev,form:{...prev.form,[field]:value},errors:{...prev.errors,[field]:error}};});},[]);// Update multiple fields at once with validation\nconst updateFields=useCallback(updates=>{setState(prev=>{const newForm={...prev.form,...updates};const newErrors={...prev.errors};// Clear errors for updated fields\nObject.keys(updates).forEach(key=>{newErrors[key]='';});// Special validation for trading dates\nif(updates.firstTradingDate||updates.lastTraadingDate){const firstDate=updates.firstTradingDate||prev.form.firstTradingDate;const lastDate=updates.lastTraadingDate||prev.form.lastTraadingDate;if(firstDate&&lastDate){const dateError=validateTradingDates(firstDate,lastDate);if(dateError){// Show error on the lastTraadingDate field as per schema\nnewErrors.lastTraadingDate=dateError;}}}return{...prev,form:newForm,errors:newErrors};});},[]);// Update string inputs (for controlled inputs)\nconst updateStringInput=useCallback((field,value)=>{setState(prev=>({...prev,stringInputs:{...prev.stringInputs,[field]:value}}));},[]);// Update local inputs (for tick calculations)\nconst updateLocalInput=useCallback((field,value)=>{setState(prev=>({...prev,localInputs:{...prev.localInputs,[field]:value}}));},[]);// Change edit mode\nconst changeEditMode=useCallback(mode=>{setState(prev=>({...prev,editMode:mode}));},[]);// Validate trading dates specifically\nconst validateTradingDatesField=useCallback(()=>{setState(prev=>{if(prev.form.firstTradingDate&&prev.form.lastTraadingDate){const dateError=validateTradingDates(prev.form.firstTradingDate,prev.form.lastTraadingDate);return{...prev,errors:{...prev.errors,lastTraadingDate:dateError||''}};}return prev;});},[]);// Validate single field\nconst validateSingleField=useCallback(field=>{const error=validateField(field,state.form[field]);setState(prev=>({...prev,errors:{...prev.errors,[field]:error||''}}));return!error;},[state.form]);// Validate entire form\nconst validateEntireForm=useCallback(()=>{const errors=validateForm(state.form);setState(prev=>({...prev,errors}));return Object.keys(errors).length===0;},[state.form]);// Handle tick size changes\nconst handleTickSizeChange=useCallback(value=>{updateStringInput('tickSize',value);const tickSize=FutureCalculationService.parseTickSize(value);if(tickSize>0){const calculations=FutureCalculationService.updateTickCalculations(tickSize,state.editMode,state.localInputs.tickValue,state.localInputs.contractMultiplier);updateFields({tickSize,...calculations});}else{updateFields({tickSize:0,tickValue:0,contractMultiplier:0});}},[state.editMode,state.localInputs,updateStringInput,updateFields]);// Handle tick value changes\nconst handleTickValueChange=useCallback(value=>{updateLocalInput('tickValue',value);if(state.form.tickSize>0){const contractMultiplier=FutureCalculationService.calculateContractMultiplier(state.form.tickSize,value);updateFields({tickValue:value,contractMultiplier});}},[state.form.tickSize,updateLocalInput,updateFields]);// Handle contract multiplier changes\nconst handleContractMultiplierChange=useCallback(value=>{updateLocalInput('contractMultiplier',value);if(state.form.tickSize>0){const tickValue=FutureCalculationService.calculateTickValue(state.form.tickSize,value);updateFields({contractMultiplier:value,tickValue});}},[state.form.tickSize,updateLocalInput,updateFields]);// Handle percentage margin changes\nconst handlePercentageMarginChange=useCallback(value=>{updateStringInput('percentageMargin',value);const percentageMargin=FutureCalculationService.parsePercentageMargin(value);if(percentageMargin>0&&state.form.lotSize>0){const initialMarginAmount=FutureCalculationService.calculateInitialMarginAmount(state.form.lotSize,percentageMargin);updateFields({percentageMargin,initialMarginAmount});}},[state.form.lotSize,updateStringInput,updateFields]);// Handle initial margin amount changes\nconst handleInitialMarginAmountChange=useCallback(value=>{updateStringInput('initialMarginAmount',value);const initialMarginAmount=FutureCalculationService.parseInitialMarginAmount(value);if(initialMarginAmount>0&&state.form.lotSize>0){const percentageMargin=FutureCalculationService.calculatePercentageMargin(state.form.lotSize,initialMarginAmount);updateFields({initialMarginAmount,percentageMargin});}},[state.form.lotSize,updateStringInput,updateFields]);// Handle lot size changes\nconst handleLotSizeChange=useCallback(value=>{updateField('lotSize',value);if(value>0&&state.form.depositType){const calculations=FutureCalculationService.updateFormCalculations(state.form,state.form.depositType,value);updateFields(calculations);}},[state.form.depositType,updateField,updateFields]);// Handle deposit type changes\nconst handleDepositTypeChange=useCallback(value=>{updateField('depositType',value);if(value&&state.form.lotSize>0){const calculations=FutureCalculationService.updateFormCalculations(state.form,value,state.form.lotSize);updateFields(calculations);}},[state.form.lotSize,updateField,updateFields]);// Handle underlying type changes\nconst handleUnderlyingTypeChange=useCallback(value=>{updateField('underlyingType',value);updateField('underlyingId',0);// Reset underlying asset when type changes\n},[updateField]);// Set submitting state\nconst setSubmitting=useCallback(isSubmitting=>{setState(prev=>({...prev,isSubmitting}));},[]);// Reset form\nconst resetForm=useCallback(()=>{setState({form:initialFormData,errors:{},isSubmitting:false,editMode:'tickValue',stringInputs:{tickSize:'',percentageMargin:'',initialMarginAmount:''},localInputs:{tickValue:0,contractMultiplier:0}});},[]);// Sync string inputs with form values\nuseEffect(()=>{setState(prev=>({...prev,stringInputs:{tickSize:prev.form.tickSize>0?prev.form.tickSize.toString():'',percentageMargin:prev.form.percentageMargin>0?prev.form.percentageMargin.toString():'',initialMarginAmount:prev.form.initialMarginAmount>0?prev.form.initialMarginAmount.toString():''}}));},[state.form.tickSize,state.form.percentageMargin,state.form.initialMarginAmount]);return{// State\nform:state.form,errors:state.errors,isSubmitting:state.isSubmitting,editMode:state.editMode,stringInputs:state.stringInputs,localInputs:state.localInputs,// Actions\nupdateField,updateFields,updateStringInput,updateLocalInput,changeEditMode,validateSingleField,validateEntireForm,validateTradingDatesField,// ✅ Nouvelle fonction de validation des dates\nhandleTickSizeChange,handleTickValueChange,handleContractMultiplierChange,handlePercentageMarginChange,handleInitialMarginAmountChange,handleLotSizeChange,handleDepositTypeChange,handleUnderlyingTypeChange,setSubmitting,resetForm};};","map":{"version":3,"names":["useState","useEffect","useCallback","validateField","validateForm","validateTradingDates","FutureCalculationService","initialFormData","symbol","description","isin","expirationCode","parentTicker","fullName","segment","maturityDate","firstTradingDate","lastTraadingDate","initialMarginAmount","percentageMargin","lotSize","contractMultiplier","tradingCurrency","underlyingType","underlyingId","settlementMethod","instrumentStatus","tickSize","tickValue","depositType","useFutureForm","state","setState","form","errors","isSubmitting","editMode","stringInputs","localInputs","updateField","field","value","prev","error","basicError","dateError","updateFields","updates","newForm","newErrors","Object","keys","forEach","key","firstDate","lastDate","updateStringInput","updateLocalInput","changeEditMode","mode","validateTradingDatesField","validateSingleField","validateEntireForm","length","handleTickSizeChange","parseTickSize","calculations","updateTickCalculations","handleTickValueChange","calculateContractMultiplier","handleContractMultiplierChange","calculateTickValue","handlePercentageMarginChange","parsePercentageMargin","calculateInitialMarginAmount","handleInitialMarginAmountChange","parseInitialMarginAmount","calculatePercentageMargin","handleLotSizeChange","updateFormCalculations","handleDepositTypeChange","handleUnderlyingTypeChange","setSubmitting","resetForm","toString"],"sources":["C:/Users/chemseddine/Desktop/frontend/src/components/forms/FutureCreationForm/hooks/useFutureForm.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { FutureFormData, PartialFutureFormData, validateField, validateForm, validateTradingDates } from '../schemas/futureFormSchema';\r\nimport { FutureCalculationService } from '../services/futureCalculationService';\r\n\r\ninterface FormState {\r\n  form: FutureFormData;\r\n  errors: Record<string, string>;\r\n  isSubmitting: boolean;\r\n  editMode: 'tickValue' | 'contractMultiplier';\r\n  stringInputs: {\r\n    tickSize: string;\r\n    percentageMargin: string;\r\n    initialMarginAmount: string;\r\n  };\r\n  localInputs: {\r\n    tickValue: number;\r\n    contractMultiplier: number;\r\n  };\r\n}\r\n\r\nconst initialFormData: FutureFormData = {\r\n  symbol: '',\r\n  description: '',\r\n  isin: '',\r\n  expirationCode: '',\r\n  parentTicker: '',\r\n  fullName: '',\r\n  segment: '',\r\n  maturityDate: '',\r\n  firstTradingDate: '',\r\n  lastTraadingDate: '',\r\n  initialMarginAmount: 0,\r\n  percentageMargin: 0,\r\n  lotSize: 0,\r\n  contractMultiplier: 0,\r\n  tradingCurrency: '',\r\n  underlyingType: '',\r\n  underlyingId: 0,\r\n  settlementMethod: '',\r\n  instrumentStatus: false,\r\n  tickSize: 0,\r\n  tickValue: 0,\r\n  depositType: '',\r\n};\r\n\r\nexport const useFutureForm = () => {\r\n  const [state, setState] = useState<FormState>({\r\n    form: initialFormData,\r\n    errors: {},\r\n    isSubmitting: false,\r\n    editMode: 'tickValue',\r\n    stringInputs: {\r\n      tickSize: '',\r\n      percentageMargin: '',\r\n      initialMarginAmount: '',\r\n    },\r\n    localInputs: {\r\n      tickValue: 0,\r\n      contractMultiplier: 0,\r\n    },\r\n  });\r\n\r\n  // Update form field with real-time validation\r\n  const updateField = useCallback((field: keyof FutureFormData, value: any) => {\r\n    setState(prev => {\r\n      let error = '';\r\n      \r\n      // Validation de base du champ\r\n      const basicError = validateField(field, value);\r\n      if (basicError) {\r\n        error = basicError;\r\n      } else {\r\n        // Validation spéciale pour les dates de trading\r\n        if (field === 'firstTradingDate' && prev.form.lastTraadingDate) {\r\n          const dateError = validateTradingDates(value, prev.form.lastTraadingDate);\r\n          if (dateError) error = dateError;\r\n        }\r\n        \r\n        if (field === 'lastTraadingDate' && prev.form.firstTradingDate) {\r\n          const dateError = validateTradingDates(prev.form.firstTradingDate, value);\r\n          if (dateError) error = dateError;\r\n        }\r\n      }\r\n      \r\n      return {\r\n        ...prev,\r\n        form: { ...prev.form, [field]: value },\r\n        errors: { ...prev.errors, [field]: error }\r\n      };\r\n    });\r\n  }, []);\r\n\r\n  // Update multiple fields at once with validation\r\n  const updateFields = useCallback((updates: PartialFutureFormData) => {\r\n    setState(prev => {\r\n      const newForm = { ...prev.form, ...updates };\r\n      const newErrors = { ...prev.errors };\r\n      \r\n      // Clear errors for updated fields\r\n      Object.keys(updates).forEach(key => {\r\n        newErrors[key] = '';\r\n      });\r\n      \r\n      // Special validation for trading dates\r\n      if (updates.firstTradingDate || updates.lastTraadingDate) {\r\n        const firstDate = updates.firstTradingDate || prev.form.firstTradingDate;\r\n        const lastDate = updates.lastTraadingDate || prev.form.lastTraadingDate;\r\n        \r\n        if (firstDate && lastDate) {\r\n          const dateError = validateTradingDates(firstDate, lastDate);\r\n          if (dateError) {\r\n            // Show error on the lastTraadingDate field as per schema\r\n            newErrors.lastTraadingDate = dateError;\r\n          }\r\n        }\r\n      }\r\n      \r\n      return {\r\n        ...prev,\r\n        form: newForm,\r\n        errors: newErrors\r\n      };\r\n    });\r\n  }, []);\r\n\r\n  // Update string inputs (for controlled inputs)\r\n  const updateStringInput = useCallback((field: keyof FormState['stringInputs'], value: string) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      stringInputs: { ...prev.stringInputs, [field]: value }\r\n    }));\r\n  }, []);\r\n\r\n  // Update local inputs (for tick calculations)\r\n  const updateLocalInput = useCallback((field: keyof FormState['localInputs'], value: number) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      localInputs: { ...prev.localInputs, [field]: value }\r\n    }));\r\n  }, []);\r\n\r\n  // Change edit mode\r\n  const changeEditMode = useCallback((mode: 'tickValue' | 'contractMultiplier') => {\r\n    setState(prev => ({ ...prev, editMode: mode }));\r\n  }, []);\r\n\r\n  // Validate trading dates specifically\r\n  const validateTradingDatesField = useCallback(() => {\r\n    setState(prev => {\r\n      if (prev.form.firstTradingDate && prev.form.lastTraadingDate) {\r\n        const dateError = validateTradingDates(prev.form.firstTradingDate, prev.form.lastTraadingDate);\r\n        return {\r\n          ...prev,\r\n          errors: { \r\n            ...prev.errors, \r\n            lastTraadingDate: dateError || '' \r\n          }\r\n        };\r\n      }\r\n      return prev;\r\n    });\r\n  }, []);\r\n\r\n  // Validate single field\r\n  const validateSingleField = useCallback((field: keyof FutureFormData) => {\r\n    const error = validateField(field, state.form[field]);\r\n    setState(prev => ({\r\n      ...prev,\r\n      errors: { ...prev.errors, [field]: error || '' }\r\n    }));\r\n    return !error;\r\n  }, [state.form]);\r\n\r\n  // Validate entire form\r\n  const validateEntireForm = useCallback(() => {\r\n    const errors = validateForm(state.form);\r\n    setState(prev => ({ ...prev, errors }));\r\n    return Object.keys(errors).length === 0;\r\n  }, [state.form]);\r\n\r\n  // Handle tick size changes\r\n  const handleTickSizeChange = useCallback((value: string) => {\r\n    updateStringInput('tickSize', value);\r\n    const tickSize = FutureCalculationService.parseTickSize(value);\r\n    \r\n    if (tickSize > 0) {\r\n      const calculations = FutureCalculationService.updateTickCalculations(\r\n        tickSize,\r\n        state.editMode,\r\n        state.localInputs.tickValue,\r\n        state.localInputs.contractMultiplier\r\n      );\r\n      \r\n      updateFields({\r\n        tickSize,\r\n        ...calculations\r\n      });\r\n    } else {\r\n      updateFields({ tickSize: 0, tickValue: 0, contractMultiplier: 0 });\r\n    }\r\n  }, [state.editMode, state.localInputs, updateStringInput, updateFields]);\r\n\r\n  // Handle tick value changes\r\n  const handleTickValueChange = useCallback((value: number) => {\r\n    updateLocalInput('tickValue', value);\r\n    \r\n    if (state.form.tickSize > 0) {\r\n      const contractMultiplier = FutureCalculationService.calculateContractMultiplier(state.form.tickSize, value);\r\n      updateFields({\r\n        tickValue: value,\r\n        contractMultiplier\r\n      });\r\n    }\r\n  }, [state.form.tickSize, updateLocalInput, updateFields]);\r\n\r\n  // Handle contract multiplier changes\r\n  const handleContractMultiplierChange = useCallback((value: number) => {\r\n    updateLocalInput('contractMultiplier', value);\r\n    \r\n    if (state.form.tickSize > 0) {\r\n      const tickValue = FutureCalculationService.calculateTickValue(state.form.tickSize, value);\r\n      updateFields({\r\n        contractMultiplier: value,\r\n        tickValue\r\n      });\r\n    }\r\n  }, [state.form.tickSize, updateLocalInput, updateFields]);\r\n\r\n  // Handle percentage margin changes\r\n  const handlePercentageMarginChange = useCallback((value: string) => {\r\n    updateStringInput('percentageMargin', value);\r\n    const percentageMargin = FutureCalculationService.parsePercentageMargin(value);\r\n    \r\n    if (percentageMargin > 0 && state.form.lotSize > 0) {\r\n      const initialMarginAmount = FutureCalculationService.calculateInitialMarginAmount(state.form.lotSize, percentageMargin);\r\n      updateFields({\r\n        percentageMargin,\r\n        initialMarginAmount\r\n      });\r\n    }\r\n  }, [state.form.lotSize, updateStringInput, updateFields]);\r\n\r\n  // Handle initial margin amount changes\r\n  const handleInitialMarginAmountChange = useCallback((value: string) => {\r\n    updateStringInput('initialMarginAmount', value);\r\n    const initialMarginAmount = FutureCalculationService.parseInitialMarginAmount(value);\r\n    \r\n    if (initialMarginAmount > 0 && state.form.lotSize > 0) {\r\n      const percentageMargin = FutureCalculationService.calculatePercentageMargin(state.form.lotSize, initialMarginAmount);\r\n      updateFields({\r\n        initialMarginAmount,\r\n        percentageMargin\r\n      });\r\n    }\r\n  }, [state.form.lotSize, updateStringInput, updateFields]);\r\n\r\n  // Handle lot size changes\r\n  const handleLotSizeChange = useCallback((value: number) => {\r\n    updateField('lotSize', value);\r\n    \r\n    if (value > 0 && state.form.depositType) {\r\n      const calculations = FutureCalculationService.updateFormCalculations(state.form, state.form.depositType, value);\r\n      updateFields(calculations);\r\n    }\r\n  }, [state.form.depositType, updateField, updateFields]);\r\n\r\n  // Handle deposit type changes\r\n  const handleDepositTypeChange = useCallback((value: string) => {\r\n    updateField('depositType', value);\r\n    \r\n    if (value && state.form.lotSize > 0) {\r\n      const calculations = FutureCalculationService.updateFormCalculations(state.form, value, state.form.lotSize);\r\n      updateFields(calculations);\r\n    }\r\n  }, [state.form.lotSize, updateField, updateFields]);\r\n\r\n  // Handle underlying type changes\r\n  const handleUnderlyingTypeChange = useCallback((value: string) => {\r\n    updateField('underlyingType', value);\r\n    updateField('underlyingId', 0); // Reset underlying asset when type changes\r\n  }, [updateField]);\r\n\r\n  // Set submitting state\r\n  const setSubmitting = useCallback((isSubmitting: boolean) => {\r\n    setState(prev => ({ ...prev, isSubmitting }));\r\n  }, []);\r\n\r\n  // Reset form\r\n  const resetForm = useCallback(() => {\r\n    setState({\r\n      form: initialFormData,\r\n      errors: {},\r\n      isSubmitting: false,\r\n      editMode: 'tickValue',\r\n      stringInputs: {\r\n        tickSize: '',\r\n        percentageMargin: '',\r\n        initialMarginAmount: '',\r\n      },\r\n      localInputs: {\r\n        tickValue: 0,\r\n        contractMultiplier: 0,\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  // Sync string inputs with form values\r\n  useEffect(() => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      stringInputs: {\r\n        tickSize: prev.form.tickSize > 0 ? prev.form.tickSize.toString() : '',\r\n        percentageMargin: prev.form.percentageMargin > 0 ? prev.form.percentageMargin.toString() : '',\r\n        initialMarginAmount: prev.form.initialMarginAmount > 0 ? prev.form.initialMarginAmount.toString() : '',\r\n      }\r\n    }));\r\n  }, [state.form.tickSize, state.form.percentageMargin, state.form.initialMarginAmount]);\r\n\r\n  return {\r\n    // State\r\n    form: state.form,\r\n    errors: state.errors,\r\n    isSubmitting: state.isSubmitting,\r\n    editMode: state.editMode,\r\n    stringInputs: state.stringInputs,\r\n    localInputs: state.localInputs,\r\n    \r\n    // Actions\r\n    updateField,\r\n    updateFields,\r\n    updateStringInput,\r\n    updateLocalInput,\r\n    changeEditMode,\r\n    validateSingleField,\r\n    validateEntireForm,\r\n    validateTradingDatesField, // ✅ Nouvelle fonction de validation des dates\r\n    handleTickSizeChange,\r\n    handleTickValueChange,\r\n    handleContractMultiplierChange,\r\n    handlePercentageMarginChange,\r\n    handleInitialMarginAmountChange,\r\n    handleLotSizeChange,\r\n    handleDepositTypeChange,\r\n    handleUnderlyingTypeChange,\r\n    setSubmitting,\r\n    resetForm,\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}