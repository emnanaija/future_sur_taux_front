{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Types for API responses\n\nexport const useFutureAPI = () => {\n  _s();\n  const [apiState, setApiState] = useState({\n    settlementMethods: [],\n    depositTypes: [],\n    underlyingTypes: [],\n    underlyingAssets: [],\n    isLoading: false,\n    error: null\n  });\n\n  // Fetch all enum values on component mount\n  useEffect(() => {\n    const fetchEnums = async () => {\n      setApiState(prev => ({\n        ...prev,\n        isLoading: true,\n        error: null\n      }));\n      try {\n        const [settlementRes, depositRes, typeRes] = await Promise.all([axios.get('/api/enums/settlement-methods'), axios.get('/api/enums/deposit-types'), axios.get('/api/underlyings/types')]);\n        setApiState(prev => ({\n          ...prev,\n          settlementMethods: settlementRes.data,\n          depositTypes: depositRes.data,\n          underlyingTypes: typeRes.data,\n          isLoading: false\n        }));\n      } catch (error) {\n        setApiState(prev => ({\n          ...prev,\n          error: 'Erreur lors du chargement des données',\n          isLoading: false\n        }));\n        console.error('Error fetching enums:', error);\n      }\n    };\n    fetchEnums();\n  }, []);\n\n  // Fetch underlying assets based on type\n  const fetchUnderlyingAssets = async underlyingType => {\n    if (!underlyingType) {\n      setApiState(prev => ({\n        ...prev,\n        underlyingAssets: []\n      }));\n      return;\n    }\n    try {\n      const response = await axios.get(`/api/underlying-assets?type=${underlyingType}`);\n      setApiState(prev => ({\n        ...prev,\n        underlyingAssets: response.data\n      }));\n    } catch (error) {\n      setApiState(prev => ({\n        ...prev,\n        underlyingAssets: []\n      }));\n      console.error('Error fetching underlying assets:', error);\n    }\n  };\n\n  // Create future\n  const createFuture = async futureData => {\n    setApiState(prev => ({\n      ...prev,\n      isLoading: true,\n      error: null\n    }));\n    try {\n      const response = await axios.post('/api/futures', futureData);\n      setApiState(prev => ({\n        ...prev,\n        isLoading: false\n      }));\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Erreur lors de la création du future';\n      setApiState(prev => ({\n        ...prev,\n        error: errorMessage,\n        isLoading: false\n      }));\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  return {\n    ...apiState,\n    fetchUnderlyingAssets,\n    createFuture\n  };\n};\n_s(useFutureAPI, \"8zwC9GStn1RNFVrwopY5p89+WfU=\");","map":{"version":3,"names":["useState","useEffect","axios","useFutureAPI","_s","apiState","setApiState","settlementMethods","depositTypes","underlyingTypes","underlyingAssets","isLoading","error","fetchEnums","prev","settlementRes","depositRes","typeRes","Promise","all","get","data","console","fetchUnderlyingAssets","underlyingType","response","createFuture","futureData","post","success","_error$response","_error$response$data","errorMessage","message"],"sources":["C:/Users/chemseddine/Desktop/frontend/src/components/forms/FutureCreationForm/hooks/useFutureAPI.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Types for API responses\r\ninterface UnderlyingAsset {\r\n  id: number;\r\n  identifier: string;\r\n}\r\n\r\ninterface APIState {\r\n  settlementMethods: string[];\r\n  depositTypes: string[];\r\n  underlyingTypes: string[];\r\n  underlyingAssets: UnderlyingAsset[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nexport const useFutureAPI = () => {\r\n  const [apiState, setApiState] = useState<APIState>({\r\n    settlementMethods: [],\r\n    depositTypes: [],\r\n    underlyingTypes: [],\r\n    underlyingAssets: [],\r\n    isLoading: false,\r\n    error: null\r\n  });\r\n\r\n  // Fetch all enum values on component mount\r\n  useEffect(() => {\r\n    const fetchEnums = async () => {\r\n      setApiState(prev => ({ ...prev, isLoading: true, error: null }));\r\n      \r\n      try {\r\n        const [settlementRes, depositRes, typeRes] = await Promise.all([\r\n          axios.get<string[]>('/api/enums/settlement-methods'),\r\n          axios.get<string[]>('/api/enums/deposit-types'),\r\n          axios.get<string[]>('/api/underlyings/types'),\r\n        ]);\r\n\r\n        setApiState(prev => ({\r\n          ...prev,\r\n          settlementMethods: settlementRes.data,\r\n          depositTypes: depositRes.data,\r\n          underlyingTypes: typeRes.data,\r\n          isLoading: false\r\n        }));\r\n      } catch (error) {\r\n        setApiState(prev => ({\r\n          ...prev,\r\n          error: 'Erreur lors du chargement des données',\r\n          isLoading: false\r\n        }));\r\n        console.error('Error fetching enums:', error);\r\n      }\r\n    };\r\n\r\n    fetchEnums();\r\n  }, []);\r\n\r\n  // Fetch underlying assets based on type\r\n  const fetchUnderlyingAssets = async (underlyingType: string) => {\r\n    if (!underlyingType) {\r\n      setApiState(prev => ({ ...prev, underlyingAssets: [] }));\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.get<UnderlyingAsset[]>(`/api/underlying-assets?type=${underlyingType}`);\r\n      setApiState(prev => ({ ...prev, underlyingAssets: response.data }));\r\n    } catch (error) {\r\n      setApiState(prev => ({ ...prev, underlyingAssets: [] }));\r\n      console.error('Error fetching underlying assets:', error);\r\n    }\r\n  };\r\n\r\n  // Create future\r\n  const createFuture = async (futureData: any) => {\r\n    setApiState(prev => ({ ...prev, isLoading: true, error: null }));\r\n    \r\n    try {\r\n      const response = await axios.post('/api/futures', futureData);\r\n      setApiState(prev => ({ ...prev, isLoading: false }));\r\n      return { success: true, data: response.data };\r\n    } catch (error: any) {\r\n      const errorMessage = error.response?.data?.message || 'Erreur lors de la création du future';\r\n      setApiState(prev => ({ ...prev, error: errorMessage, isLoading: false }));\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  return {\r\n    ...apiState,\r\n    fetchUnderlyingAssets,\r\n    createFuture\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}