{"ast":null,"code":"import{useState,useEffect}from'react';import axios from'axios';// Types for API responses\nexport const useFutureAPI=()=>{const[apiState,setApiState]=useState({settlementMethods:[],depositTypes:[],underlyingTypes:[],underlyingAssets:[],isLoading:false,error:null});// Fetch all enum values on component mount\nuseEffect(()=>{const fetchEnums=async()=>{setApiState(prev=>({...prev,isLoading:true,error:null}));try{const[settlementRes,depositRes,typeRes]=await Promise.all([axios.get('/api/enums/settlement-methods'),axios.get('/api/enums/deposit-types'),axios.get('/api/underlyings/types')]);setApiState(prev=>({...prev,settlementMethods:settlementRes.data,depositTypes:depositRes.data,underlyingTypes:typeRes.data,isLoading:false}));}catch(error){setApiState(prev=>({...prev,error:'Erreur lors du chargement des données',isLoading:false}));console.error('Error fetching enums:',error);}};fetchEnums();},[]);// Fetch underlying assets based on type\nconst fetchUnderlyingAssets=async underlyingType=>{if(!underlyingType){setApiState(prev=>({...prev,underlyingAssets:[]}));return;}try{const response=await axios.get(`/api/underlying-assets?type=${underlyingType}`);setApiState(prev=>({...prev,underlyingAssets:response.data}));}catch(error){setApiState(prev=>({...prev,underlyingAssets:[]}));console.error('Error fetching underlying assets:',error);}};// Create future\nconst createFuture=async futureData=>{setApiState(prev=>({...prev,isLoading:true,error:null}));try{const response=await axios.post('/api/futures',futureData);setApiState(prev=>({...prev,isLoading:false}));return{success:true,data:response.data};}catch(error){var _error$response,_error$response$data;const errorMessage=((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Erreur lors de la création du future';setApiState(prev=>({...prev,error:errorMessage,isLoading:false}));return{success:false,error:errorMessage};}};return{...apiState,fetchUnderlyingAssets,createFuture};};","map":{"version":3,"names":["useState","useEffect","axios","useFutureAPI","apiState","setApiState","settlementMethods","depositTypes","underlyingTypes","underlyingAssets","isLoading","error","fetchEnums","prev","settlementRes","depositRes","typeRes","Promise","all","get","data","console","fetchUnderlyingAssets","underlyingType","response","createFuture","futureData","post","success","_error$response","_error$response$data","errorMessage","message"],"sources":["C:/Users/chemseddine/Desktop/frontend/src/components/forms/FutureCreationForm/hooks/useFutureAPI.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Types for API responses\r\ninterface UnderlyingAsset {\r\n  id: number;\r\n  identifier: string;\r\n}\r\n\r\ninterface APIState {\r\n  settlementMethods: string[];\r\n  depositTypes: string[];\r\n  underlyingTypes: string[];\r\n  underlyingAssets: UnderlyingAsset[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nexport const useFutureAPI = () => {\r\n  const [apiState, setApiState] = useState<APIState>({\r\n    settlementMethods: [],\r\n    depositTypes: [],\r\n    underlyingTypes: [],\r\n    underlyingAssets: [],\r\n    isLoading: false,\r\n    error: null\r\n  });\r\n\r\n  // Fetch all enum values on component mount\r\n  useEffect(() => {\r\n    const fetchEnums = async () => {\r\n      setApiState(prev => ({ ...prev, isLoading: true, error: null }));\r\n      \r\n      try {\r\n        const [settlementRes, depositRes, typeRes] = await Promise.all([\r\n          axios.get<string[]>('/api/enums/settlement-methods'),\r\n          axios.get<string[]>('/api/enums/deposit-types'),\r\n          axios.get<string[]>('/api/underlyings/types'),\r\n        ]);\r\n\r\n        setApiState(prev => ({\r\n          ...prev,\r\n          settlementMethods: settlementRes.data,\r\n          depositTypes: depositRes.data,\r\n          underlyingTypes: typeRes.data,\r\n          isLoading: false\r\n        }));\r\n      } catch (error) {\r\n        setApiState(prev => ({\r\n          ...prev,\r\n          error: 'Erreur lors du chargement des données',\r\n          isLoading: false\r\n        }));\r\n        console.error('Error fetching enums:', error);\r\n      }\r\n    };\r\n\r\n    fetchEnums();\r\n  }, []);\r\n\r\n  // Fetch underlying assets based on type\r\n  const fetchUnderlyingAssets = async (underlyingType: string) => {\r\n    if (!underlyingType) {\r\n      setApiState(prev => ({ ...prev, underlyingAssets: [] }));\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.get<UnderlyingAsset[]>(`/api/underlying-assets?type=${underlyingType}`);\r\n      setApiState(prev => ({ ...prev, underlyingAssets: response.data }));\r\n    } catch (error) {\r\n      setApiState(prev => ({ ...prev, underlyingAssets: [] }));\r\n      console.error('Error fetching underlying assets:', error);\r\n    }\r\n  };\r\n\r\n  // Create future\r\n  const createFuture = async (futureData: any) => {\r\n    setApiState(prev => ({ ...prev, isLoading: true, error: null }));\r\n    \r\n    try {\r\n      const response = await axios.post('/api/futures', futureData);\r\n      setApiState(prev => ({ ...prev, isLoading: false }));\r\n      return { success: true, data: response.data };\r\n    } catch (error: any) {\r\n      const errorMessage = error.response?.data?.message || 'Erreur lors de la création du future';\r\n      setApiState(prev => ({ ...prev, error: errorMessage, isLoading: false }));\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  return {\r\n    ...apiState,\r\n    fetchUnderlyingAssets,\r\n    createFuture\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}