{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chemseddine\\\\Desktop\\\\future_sur_taux\\\\frontend\\\\src\\\\components\\\\FutureCreationForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FutureCreationForm = () => {\n  _s();\n  const [form, setForm] = useState({\n    tickSize: 0,\n    tickValue: 0,\n    contractMultiplier: 0\n  });\n\n  // tickSize en string pour gérer la saisie libre\n  const [tickSizeStr, setTickSizeStr] = useState('');\n\n  // Mode tick: soit on saisit tickValue soit contractMultiplier\n  const [tickMode, setTickMode] = useState('value');\n\n  // Convertir string en nombre (float) avec validation simple\n  const parseTickSize = str => {\n    if (str === '') return 0;\n    if (!/^\\d*\\.?\\d*$/.test(str)) return NaN; // autorise uniquement chiffres et un seul point\n    const val = parseFloat(str);\n    return isNaN(val) ? 0 : val;\n  };\n\n  // Quand tickSizeStr change, on met à jour form.tickSize et recalculs\n  useEffect(() => {\n    const val = parseTickSize(tickSizeStr);\n    if (isNaN(val)) return; // ignore saisie invalide\n\n    setForm(prev => {\n      if (tickMode === 'value') {\n        const contractMultiplier = val > 0 ? prev.tickValue / val : 0;\n        return {\n          ...prev,\n          tickSize: val,\n          contractMultiplier\n        };\n      } else {\n        const tickValue = val * prev.contractMultiplier;\n        return {\n          ...prev,\n          tickSize: val,\n          tickValue\n        };\n      }\n    });\n  }, [tickSizeStr, tickMode]);\n\n  // Handlers pour tickValue et contractMultiplier\n  const handleTickValueChange = e => {\n    const val = parseFloat(e.target.value);\n    if (!isNaN(val)) {\n      setForm(prev => ({\n        ...prev,\n        tickValue: val,\n        contractMultiplier: prev.tickSize > 0 ? val / prev.tickSize : 0\n      }));\n    }\n  };\n  const handleContractMultiplierChange = e => {\n    const val = parseFloat(e.target.value);\n    if (!isNaN(val)) {\n      setForm(prev => ({\n        ...prev,\n        contractMultiplier: val,\n        tickValue: val * prev.tickSize\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Mode Tick :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: tickMode,\n        onChange: e => setTickMode(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"value\",\n          children: \"Saisir Tick Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"multiplier\",\n          children: \"Saisir Contract Multiplier\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Tick Size\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: tickSizeStr,\n        onChange: e => {\n          const val = e.target.value;\n          // Autorise seulement chiffres et point (une seule fois)\n          if (val === '' || /^\\d*\\.?\\d*$/.test(val)) {\n            setTickSizeStr(val);\n          }\n        },\n        placeholder: \"Exemple: 0.01\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), tickMode === 'value' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Tick Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        step: \"0.0001\",\n        min: \"0\",\n        value: form.tickValue,\n        onChange: handleTickValueChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Contract Multiplier\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        step: \"0.0001\",\n        min: \"0\",\n        value: form.contractMultiplier,\n        onChange: handleContractMultiplierChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(FutureCreationForm, \"HTbx8iBn3B3FWUnJ9zK56hBuYaY=\");\n_c = FutureCreationForm;\nexport default FutureCreationForm;\nvar _c;\n$RefreshReg$(_c, \"FutureCreationForm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FutureCreationForm","_s","form","setForm","tickSize","tickValue","contractMultiplier","tickSizeStr","setTickSizeStr","tickMode","setTickMode","parseTickSize","str","test","NaN","val","parseFloat","isNaN","prev","handleTickValueChange","e","target","value","handleContractMultiplierChange","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","type","placeholder","step","min","_c","$RefreshReg$"],"sources":["C:/Users/chemseddine/Desktop/future_sur_taux/frontend/src/components/FutureCreationForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\ninterface FutureCreationDTO {\r\n  tickSize: number;\r\n  tickValue: number;\r\n  contractMultiplier: number;\r\n  // ajoute les autres champs si besoin\r\n}\r\n\r\nconst FutureCreationForm: React.FC = () => {\r\n  const [form, setForm] = useState<FutureCreationDTO>({\r\n    tickSize: 0,\r\n    tickValue: 0,\r\n    contractMultiplier: 0,\r\n  });\r\n\r\n  // tickSize en string pour gérer la saisie libre\r\n  const [tickSizeStr, setTickSizeStr] = useState('');\r\n\r\n  // Mode tick: soit on saisit tickValue soit contractMultiplier\r\n  const [tickMode, setTickMode] = useState<'value' | 'multiplier'>('value');\r\n\r\n  // Convertir string en nombre (float) avec validation simple\r\n  const parseTickSize = (str: string) => {\r\n    if (str === '') return 0;\r\n    if (!/^\\d*\\.?\\d*$/.test(str)) return NaN; // autorise uniquement chiffres et un seul point\r\n    const val = parseFloat(str);\r\n    return isNaN(val) ? 0 : val;\r\n  };\r\n\r\n  // Quand tickSizeStr change, on met à jour form.tickSize et recalculs\r\n  useEffect(() => {\r\n    const val = parseTickSize(tickSizeStr);\r\n    if (isNaN(val)) return; // ignore saisie invalide\r\n\r\n    setForm(prev => {\r\n      if (tickMode === 'value') {\r\n        const contractMultiplier = val > 0 ? prev.tickValue / val : 0;\r\n        return { ...prev, tickSize: val, contractMultiplier };\r\n      } else {\r\n        const tickValue = val * prev.contractMultiplier;\r\n        return { ...prev, tickSize: val, tickValue };\r\n      }\r\n    });\r\n  }, [tickSizeStr, tickMode]);\r\n\r\n  // Handlers pour tickValue et contractMultiplier\r\n  const handleTickValueChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const val = parseFloat(e.target.value);\r\n    if (!isNaN(val)) {\r\n      setForm(prev => ({\r\n        ...prev,\r\n        tickValue: val,\r\n        contractMultiplier: prev.tickSize > 0 ? val / prev.tickSize : 0,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleContractMultiplierChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const val = parseFloat(e.target.value);\r\n    if (!isNaN(val)) {\r\n      setForm(prev => ({\r\n        ...prev,\r\n        contractMultiplier: val,\r\n        tickValue: val * prev.tickSize,\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <div>\r\n        <label>Mode Tick :</label>\r\n        <select\r\n          value={tickMode}\r\n          onChange={e => setTickMode(e.target.value as 'value' | 'multiplier')}\r\n        >\r\n          <option value=\"value\">Saisir Tick Value</option>\r\n          <option value=\"multiplier\">Saisir Contract Multiplier</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div>\r\n        <label>Tick Size</label>\r\n        <input\r\n          type=\"text\"\r\n          value={tickSizeStr}\r\n          onChange={e => {\r\n            const val = e.target.value;\r\n            // Autorise seulement chiffres et point (une seule fois)\r\n            if (val === '' || /^\\d*\\.?\\d*$/.test(val)) {\r\n              setTickSizeStr(val);\r\n            }\r\n          }}\r\n          placeholder=\"Exemple: 0.01\"\r\n        />\r\n      </div>\r\n\r\n      {tickMode === 'value' ? (\r\n        <div>\r\n          <label>Tick Value</label>\r\n          <input\r\n            type=\"number\"\r\n            step=\"0.0001\"\r\n            min=\"0\"\r\n            value={form.tickValue}\r\n            onChange={handleTickValueChange}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <label>Contract Multiplier</label>\r\n          <input\r\n            type=\"number\"\r\n            step=\"0.0001\"\r\n            min=\"0\"\r\n            value={form.contractMultiplier}\r\n            onChange={handleContractMultiplierChange}\r\n          />\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default FutureCreationForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}