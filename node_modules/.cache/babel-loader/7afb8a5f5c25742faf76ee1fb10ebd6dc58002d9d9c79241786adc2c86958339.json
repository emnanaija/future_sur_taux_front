{"ast":null,"code":"export class FutureCalculationService{/**\r\n   * Calculate tick value based on tick size and contract multiplier\r\n   */static calculateTickValue(tickSize,contractMultiplier){if(tickSize<=0||contractMultiplier<=0)return 0;return tickSize*contractMultiplier;}/**\r\n   * Calculate contract multiplier based on tick size and tick value\r\n   */static calculateContractMultiplier(tickSize,tickValue){if(tickSize<=0)return 0;return tickValue/tickSize;}/**\r\n   * Calculate initial margin amount based on lot size and percentage margin\r\n   */static calculateInitialMarginAmount(lotSize,percentageMargin){if(lotSize<=0||percentageMargin<=0)return 0;return lotSize*percentageMargin;}/**\r\n   * Calculate percentage margin based on lot size and initial margin amount\r\n   */static calculatePercentageMargin(lotSize,initialMarginAmount){if(lotSize<=0)return 0;return initialMarginAmount/lotSize;}/**\r\n   * Parse tick size from string input\r\n   */static parseTickSize(str){if(!str)return 0;const val=parseFloat(str);return isNaN(val)?0:val;}/**\r\n   * Parse percentage margin from string input\r\n   */static parsePercentageMargin(str){if(!str)return 0;const val=parseFloat(str);return isNaN(val)?0:val;}/**\r\n   * Parse initial margin amount from string input\r\n   */static parseInitialMarginAmount(str){if(!str)return 0;const val=parseFloat(str);return isNaN(val)?0:val;}/**\r\n   * Update form with calculated values based on deposit type\r\n   */static updateFormCalculations(form,depositType,lotSize){if(depositType==='RATE'){// For rate-based deposits, calculate initial margin from percentage\nreturn{initialMarginAmount:this.calculateInitialMarginAmount(lotSize,form.percentageMargin)};}else if(depositType==='AMOUNT'){// For amount-based deposits, calculate percentage from initial margin\nreturn{percentageMargin:this.calculatePercentageMargin(lotSize,form.initialMarginAmount)};}return{};}/**\r\n   * Update tick-related calculations based on edit mode\r\n   */static updateTickCalculations(tickSize,editMode,tickValueInput,contractMultiplierInput){if(editMode==='tickValue'){const contractMultiplier=this.calculateContractMultiplier(tickSize,tickValueInput);return{tickValue:tickValueInput,contractMultiplier};}else{const tickValue=this.calculateTickValue(tickSize,contractMultiplierInput);return{tickValue,contractMultiplier:contractMultiplierInput};}}}","map":{"version":3,"names":["FutureCalculationService","calculateTickValue","tickSize","contractMultiplier","calculateContractMultiplier","tickValue","calculateInitialMarginAmount","lotSize","percentageMargin","calculatePercentageMargin","initialMarginAmount","parseTickSize","str","val","parseFloat","isNaN","parsePercentageMargin","parseInitialMarginAmount","updateFormCalculations","form","depositType","updateTickCalculations","editMode","tickValueInput","contractMultiplierInput"],"sources":["C:/Users/chemseddine/Desktop/frontend/src/components/forms/FutureCreationForm/services/futureCalculationService.ts"],"sourcesContent":["import { FutureFormData, PartialFutureFormData } from '../schemas/futureFormSchema';\r\n\r\nexport class FutureCalculationService {\r\n  /**\r\n   * Calculate tick value based on tick size and contract multiplier\r\n   */\r\n  static calculateTickValue(tickSize: number, contractMultiplier: number): number {\r\n    if (tickSize <= 0 || contractMultiplier <= 0) return 0;\r\n    return tickSize * contractMultiplier;\r\n  }\r\n\r\n  /**\r\n   * Calculate contract multiplier based on tick size and tick value\r\n   */\r\n  static calculateContractMultiplier(tickSize: number, tickValue: number): number {\r\n    if (tickSize <= 0) return 0;\r\n    return tickValue / tickSize;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial margin amount based on lot size and percentage margin\r\n   */\r\n  static calculateInitialMarginAmount(lotSize: number, percentageMargin: number): number {\r\n    if (lotSize <= 0 || percentageMargin <= 0) return 0;\r\n    return lotSize * percentageMargin;\r\n  }\r\n\r\n  /**\r\n   * Calculate percentage margin based on lot size and initial margin amount\r\n   */\r\n  static calculatePercentageMargin(lotSize: number, initialMarginAmount: number): number {\r\n    if (lotSize <= 0) return 0;\r\n    return initialMarginAmount / lotSize;\r\n  }\r\n\r\n  /**\r\n   * Parse tick size from string input\r\n   */\r\n  static parseTickSize(str: string): number {\r\n    if (!str) return 0;\r\n    const val = parseFloat(str);\r\n    return isNaN(val) ? 0 : val;\r\n  }\r\n\r\n  /**\r\n   * Parse percentage margin from string input\r\n   */\r\n  static parsePercentageMargin(str: string): number {\r\n    if (!str) return 0;\r\n    const val = parseFloat(str);\r\n    return isNaN(val) ? 0 : val;\r\n  }\r\n\r\n  /**\r\n   * Parse initial margin amount from string input\r\n   */\r\n  static parseInitialMarginAmount(str: string): number {\r\n    if (!str) return 0;\r\n    const val = parseFloat(str);\r\n    return isNaN(val) ? 0 : val;\r\n  }\r\n\r\n  /**\r\n   * Update form with calculated values based on deposit type\r\n   */\r\n  static updateFormCalculations(\r\n    form: FutureFormData,\r\n    depositType: string,\r\n    lotSize: number\r\n  ): PartialFutureFormData {\r\n    if (depositType === 'RATE') {\r\n      // For rate-based deposits, calculate initial margin from percentage\r\n      return {\r\n        initialMarginAmount: this.calculateInitialMarginAmount(lotSize, form.percentageMargin)\r\n      };\r\n    } else if (depositType === 'AMOUNT') {\r\n      // For amount-based deposits, calculate percentage from initial margin\r\n      return {\r\n        percentageMargin: this.calculatePercentageMargin(lotSize, form.initialMarginAmount)\r\n      };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Update tick-related calculations based on edit mode\r\n   */\r\n  static updateTickCalculations(\r\n    tickSize: number,\r\n    editMode: 'tickValue' | 'contractMultiplier',\r\n    tickValueInput: number,\r\n    contractMultiplierInput: number\r\n  ): { tickValue: number; contractMultiplier: number } {\r\n    if (editMode === 'tickValue') {\r\n      const contractMultiplier = this.calculateContractMultiplier(tickSize, tickValueInput);\r\n      return {\r\n        tickValue: tickValueInput,\r\n        contractMultiplier\r\n      };\r\n    } else {\r\n      const tickValue = this.calculateTickValue(tickSize, contractMultiplierInput);\r\n      return {\r\n        tickValue,\r\n        contractMultiplier: contractMultiplierInput\r\n      };\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}