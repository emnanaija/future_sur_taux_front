{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\n\n// Define form sections with their required fields\n\nexport const FORM_SECTIONS = [{\n  id: 'identification',\n  title: \"Identification de l'instrument\",\n  description: \"Informations de base\",\n  fields: ['symbol', 'description', 'isin', 'fullName']\n}, {\n  id: 'deposit',\n  title: \"Dépôt & sous-jacents\",\n  description: \"Configuration des marges\",\n  fields: ['depositType', 'lotSize', 'initialMarginAmount', 'percentageMargin', 'underlyingType', 'underlyingId']\n}, {\n  id: 'trading',\n  title: \"Négociation\",\n  description: \"Paramètres de trading\",\n  fields: ['firstTradingDate', 'lastTraadingDate', 'tradingCurrency', 'tickSize', 'settlementMethod']\n}];\nexport const useFormNavigation = (form, errors) => {\n  _s();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [completedSteps, setCompletedSteps] = useState(new Set());\n  const [justArrivedOnLastStep, setJustArrivedOnLastStep] = useState(false);\n\n  // Check if a step is completed\n  const isStepCompleted = useCallback(stepIndex => {\n    const section = FORM_SECTIONS[stepIndex];\n    if (!section) return false;\n    return section.fields.every(field => {\n      const value = form[field];\n      if (typeof value === 'string') {\n        return value.trim() !== '';\n      }\n      if (typeof value === 'number') {\n        return value > 0;\n      }\n      if (typeof value === 'boolean') {\n        return true; // Boolean fields are always considered valid\n      }\n      return value !== undefined && value !== null;\n    });\n  }, [form]);\n\n  // Validate current step\n  const validateCurrentStep = useCallback(() => {\n    const section = FORM_SECTIONS[currentStep];\n    if (!section) return false;\n    return section.fields.every(field => {\n      const value = form[field];\n      if (typeof value === 'string') {\n        return value.trim() !== '';\n      }\n      if (typeof value === 'number') {\n        return value > 0;\n      }\n      if (typeof value === 'boolean') {\n        return true;\n      }\n      return value !== undefined && value !== null;\n    });\n  }, [currentStep, form]);\n\n  // Check if current step has errors\n  const hasStepErrors = useCallback(() => {\n    const section = FORM_SECTIONS[currentStep];\n    if (!section) return false;\n    return section.fields.some(field => errors[field]);\n  }, [currentStep, errors]);\n\n  // Go to next step\n  const nextStep = useCallback(() => {\n    if (currentStep >= FORM_SECTIONS.length - 1) {\n      return false; // Already on last step\n    }\n    if (!validateCurrentStep()) {\n      return false; // Current step is not valid\n    }\n\n    // Mark current step as completed\n    setCompletedSteps(prev => new Set(prev).add(currentStep));\n\n    // Move to next step\n    const nextStepIndex = currentStep + 1;\n    setCurrentStep(nextStepIndex);\n\n    // Check if we just arrived on the last step\n    if (nextStepIndex === FORM_SECTIONS.length - 1) {\n      setJustArrivedOnLastStep(true);\n    }\n    return true;\n  }, [currentStep, validateCurrentStep]);\n\n  // Go to previous step\n  const prevStep = useCallback(() => {\n    if (currentStep <= 0) {\n      return false; // Already on first step\n    }\n    setCurrentStep(prev => prev - 1);\n    setJustArrivedOnLastStep(false);\n    return true;\n  }, [currentStep]);\n\n  // Go to specific step\n  const goToStep = useCallback(stepIndex => {\n    if (stepIndex < 0 || stepIndex >= FORM_SECTIONS.length) {\n      return false; // Invalid step index\n    }\n\n    // Only allow going to completed steps or the next available step\n    if (stepIndex > currentStep && !completedSteps.has(stepIndex - 1)) {\n      return false; // Cannot skip steps\n    }\n    setCurrentStep(stepIndex);\n    setJustArrivedOnLastStep(stepIndex === FORM_SECTIONS.length - 1);\n    return true;\n  }, [currentStep, completedSteps]);\n\n  // Check if form is ready for submission\n  const isFormReadyForSubmission = useCallback(() => {\n    // Must be on last step\n    if (currentStep !== FORM_SECTIONS.length - 1) {\n      return false;\n    }\n\n    // All steps must be completed\n    if (completedSteps.size < FORM_SECTIONS.length - 1) {\n      return false;\n    }\n\n    // Current step must be valid\n    return validateCurrentStep();\n  }, [currentStep, completedSteps, validateCurrentStep]);\n\n  // Get progress percentage\n  const getProgressPercentage = useCallback(() => {\n    return (currentStep + 1) / FORM_SECTIONS.length * 100;\n  }, [currentStep]);\n\n  // Get current section\n  const getCurrentSection = useCallback(() => {\n    return FORM_SECTIONS[currentStep];\n  }, [currentStep]);\n\n  // Get section by index\n  const getSection = useCallback(index => {\n    return FORM_SECTIONS[index];\n  }, []);\n  return {\n    // State\n    currentStep,\n    completedSteps,\n    justArrivedOnLastStep,\n    // Actions\n    nextStep,\n    prevStep,\n    goToStep,\n    // Computed values\n    isStepCompleted,\n    validateCurrentStep,\n    hasStepErrors,\n    isFormReadyForSubmission,\n    getProgressPercentage,\n    getCurrentSection,\n    getSection,\n    // Constants\n    totalSteps: FORM_SECTIONS.length,\n    sections: FORM_SECTIONS\n  };\n};\n_s(useFormNavigation, \"iU7+9w97xGPTpYChd3Nm9Hq8FBM=\");","map":{"version":3,"names":["useState","useCallback","FORM_SECTIONS","id","title","description","fields","useFormNavigation","form","errors","_s","currentStep","setCurrentStep","completedSteps","setCompletedSteps","Set","justArrivedOnLastStep","setJustArrivedOnLastStep","isStepCompleted","stepIndex","section","every","field","value","trim","undefined","validateCurrentStep","hasStepErrors","some","nextStep","length","prev","add","nextStepIndex","prevStep","goToStep","has","isFormReadyForSubmission","size","getProgressPercentage","getCurrentSection","getSection","index","totalSteps","sections"],"sources":["C:/Users/chemseddine/Desktop/future_sur_taux/frontend/src/components/forms/FutureCreationForm/hooks/useFormNavigation.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { FutureFormData } from '../schemas/futureFormSchema';\r\n\r\n// Define form sections with their required fields\r\nexport interface FormSection {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  fields: (keyof FutureFormData)[];\r\n}\r\n\r\nexport const FORM_SECTIONS: FormSection[] = [\r\n  {\r\n    id: 'identification',\r\n    title: \"Identification de l'instrument\",\r\n    description: \"Informations de base\",\r\n    fields: ['symbol', 'description', 'isin', 'fullName']\r\n  },\r\n  {\r\n    id: 'deposit',\r\n    title: \"Dépôt & sous-jacents\",\r\n    description: \"Configuration des marges\",\r\n    fields: ['depositType', 'lotSize', 'initialMarginAmount', 'percentageMargin', 'underlyingType', 'underlyingId']\r\n  },\r\n  {\r\n    id: 'trading',\r\n    title: \"Négociation\",\r\n    description: \"Paramètres de trading\",\r\n    fields: ['firstTradingDate', 'lastTraadingDate', 'tradingCurrency', 'tickSize', 'settlementMethod']\r\n  }\r\n];\r\n\r\nexport const useFormNavigation = (form: FutureFormData, errors: Record<string, string>) => {\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [completedSteps, setCompletedSteps] = useState<Set<number>>(new Set());\r\n  const [justArrivedOnLastStep, setJustArrivedOnLastStep] = useState(false);\r\n\r\n  // Check if a step is completed\r\n  const isStepCompleted = useCallback((stepIndex: number): boolean => {\r\n    const section = FORM_SECTIONS[stepIndex];\r\n    if (!section) return false;\r\n\r\n    return section.fields.every(field => {\r\n      const value = form[field];\r\n      if (typeof value === 'string') {\r\n        return value.trim() !== '';\r\n      }\r\n      if (typeof value === 'number') {\r\n        return value > 0;\r\n      }\r\n      if (typeof value === 'boolean') {\r\n        return true; // Boolean fields are always considered valid\r\n      }\r\n      return value !== undefined && value !== null;\r\n    });\r\n  }, [form]);\r\n\r\n  // Validate current step\r\n  const validateCurrentStep = useCallback((): boolean => {\r\n    const section = FORM_SECTIONS[currentStep];\r\n    if (!section) return false;\r\n\r\n    return section.fields.every(field => {\r\n      const value = form[field];\r\n      if (typeof value === 'string') {\r\n        return value.trim() !== '';\r\n      }\r\n      if (typeof value === 'number') {\r\n        return value > 0;\r\n      }\r\n      if (typeof value === 'boolean') {\r\n        return true;\r\n      }\r\n      return value !== undefined && value !== null;\r\n    });\r\n  }, [currentStep, form]);\r\n\r\n  // Check if current step has errors\r\n  const hasStepErrors = useCallback((): boolean => {\r\n    const section = FORM_SECTIONS[currentStep];\r\n    if (!section) return false;\r\n\r\n    return section.fields.some(field => errors[field as string]);\r\n  }, [currentStep, errors]);\r\n\r\n  // Go to next step\r\n  const nextStep = useCallback((): boolean => {\r\n    if (currentStep >= FORM_SECTIONS.length - 1) {\r\n      return false; // Already on last step\r\n    }\r\n\r\n    if (!validateCurrentStep()) {\r\n      return false; // Current step is not valid\r\n    }\r\n\r\n    // Mark current step as completed\r\n    setCompletedSteps(prev => new Set(prev).add(currentStep));\r\n    \r\n    // Move to next step\r\n    const nextStepIndex = currentStep + 1;\r\n    setCurrentStep(nextStepIndex);\r\n\r\n    // Check if we just arrived on the last step\r\n    if (nextStepIndex === FORM_SECTIONS.length - 1) {\r\n      setJustArrivedOnLastStep(true);\r\n    }\r\n\r\n    return true;\r\n  }, [currentStep, validateCurrentStep]);\r\n\r\n  // Go to previous step\r\n  const prevStep = useCallback((): boolean => {\r\n    if (currentStep <= 0) {\r\n      return false; // Already on first step\r\n    }\r\n\r\n    setCurrentStep(prev => prev - 1);\r\n    setJustArrivedOnLastStep(false);\r\n    return true;\r\n  }, [currentStep]);\r\n\r\n  // Go to specific step\r\n  const goToStep = useCallback((stepIndex: number): boolean => {\r\n    if (stepIndex < 0 || stepIndex >= FORM_SECTIONS.length) {\r\n      return false; // Invalid step index\r\n    }\r\n\r\n    // Only allow going to completed steps or the next available step\r\n    if (stepIndex > currentStep && !completedSteps.has(stepIndex - 1)) {\r\n      return false; // Cannot skip steps\r\n    }\r\n\r\n    setCurrentStep(stepIndex);\r\n    setJustArrivedOnLastStep(stepIndex === FORM_SECTIONS.length - 1);\r\n    return true;\r\n  }, [currentStep, completedSteps]);\r\n\r\n  // Check if form is ready for submission\r\n  const isFormReadyForSubmission = useCallback((): boolean => {\r\n    // Must be on last step\r\n    if (currentStep !== FORM_SECTIONS.length - 1) {\r\n      return false;\r\n    }\r\n\r\n    // All steps must be completed\r\n    if (completedSteps.size < FORM_SECTIONS.length - 1) {\r\n      return false;\r\n    }\r\n\r\n    // Current step must be valid\r\n    return validateCurrentStep();\r\n  }, [currentStep, completedSteps, validateCurrentStep]);\r\n\r\n  // Get progress percentage\r\n  const getProgressPercentage = useCallback((): number => {\r\n    return ((currentStep + 1) / FORM_SECTIONS.length) * 100;\r\n  }, [currentStep]);\r\n\r\n  // Get current section\r\n  const getCurrentSection = useCallback((): FormSection | undefined => {\r\n    return FORM_SECTIONS[currentStep];\r\n  }, [currentStep]);\r\n\r\n  // Get section by index\r\n  const getSection = useCallback((index: number): FormSection | undefined => {\r\n    return FORM_SECTIONS[index];\r\n  }, []);\r\n\r\n  return {\r\n    // State\r\n    currentStep,\r\n    completedSteps,\r\n    justArrivedOnLastStep,\r\n    \r\n    // Actions\r\n    nextStep,\r\n    prevStep,\r\n    goToStep,\r\n    \r\n    // Computed values\r\n    isStepCompleted,\r\n    validateCurrentStep,\r\n    hasStepErrors,\r\n    isFormReadyForSubmission,\r\n    getProgressPercentage,\r\n    getCurrentSection,\r\n    getSection,\r\n    \r\n    // Constants\r\n    totalSteps: FORM_SECTIONS.length,\r\n    sections: FORM_SECTIONS,\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}