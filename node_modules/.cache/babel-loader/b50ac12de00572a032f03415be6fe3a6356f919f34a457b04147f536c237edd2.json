{"ast":null,"code":"import{useState,useCallback}from'react';// Define form sections with their required fields and validation rules\nexport const FORM_SECTIONS=[{id:'identification',title:\"Identification de l'instrument\",description:\"Informations de base\",fields:['symbol','description','isin','expirationCode','parentTicker','fullName','segment','maturityDate'],requiredFields:['symbol','isin','fullName'],validationMessages:{symbol:'Le symbole est requis pour identifier l\\'instrument',isin:'Le code ISIN est obligatoire',fullName:'Le nom complet de l\\'instrument est requis'}},{id:'deposit',title:\"Dépôt & sous-jacents\",description:\"Configuration des marges\",fields:['depositType','lotSize','initialMarginAmount','percentageMargin','underlyingType','underlyingId'],requiredFields:['depositType','lotSize','underlyingType','underlyingId'],validationMessages:{depositType:'Veuillez sélectionner le type de dépôt',lotSize:'La taille de lot doit être supérieure à 0',underlyingType:'Veuillez sélectionner le type de sous-jacent',underlyingId:'Veuillez sélectionner un sous-jacent'}},{id:'trading',title:\"Négociation\",description:\"Paramètres de trading\",fields:['firstTradingDate','lastTraadingDate','tradingCurrency','tickSize','settlementMethod','instrumentStatus'],requiredFields:['firstTradingDate','lastTraadingDate','tradingCurrency','tickSize','settlementMethod'],validationMessages:{firstTradingDate:'La date de première négociation est requise',lastTraadingDate:'La date de dernière négociation est requise',tradingCurrency:'La devise de négociation est obligatoire',tickSize:'Le tick size doit être supérieur à 0',settlementMethod:'Veuillez sélectionner la méthode de règlement'}}];export const useFormNavigation=(form,errors)=>{const[currentStep,setCurrentStep]=useState(0);const[completedSteps,setCompletedSteps]=useState(new Set());const[justArrivedOnLastStep,setJustArrivedOnLastStep]=useState(false);// Check if a step is completed\nconst isStepCompleted=useCallback(stepIndex=>{const section=FORM_SECTIONS[stepIndex];if(!section)return false;return section.requiredFields.every(field=>{const value=form[field];if(typeof value==='string'){return value.trim()!=='';}if(typeof value==='number'){return value>0;}if(typeof value==='boolean'){return true;// Boolean fields are always considered valid\n}return value!==undefined&&value!==null;});},[form]);// Validate current step with detailed feedback\nconst validateCurrentStep=useCallback(()=>{const section=FORM_SECTIONS[currentStep];if(!section){return{isValid:false,missingFields:[],errorMessages:['Section invalide'],canProceed:false};}const missingFields=[];const errorMessages=[];// Check required fields\nsection.requiredFields.forEach(field=>{const value=form[field];let isValid=true;if(typeof value==='string'){isValid=value.trim()!=='';}else if(typeof value==='number'){isValid=value>0;}else if(typeof value==='boolean'){isValid=true;}else{isValid=value!==undefined&&value!==null;}if(!isValid){missingFields.push(field);errorMessages.push(section.validationMessages[field]||`Le champ ${field} est requis`);}});// Check for validation errors\nsection.fields.forEach(field=>{if(errors[field]){errorMessages.push(errors[field]);}});const isValid=missingFields.length===0&&errorMessages.length===0;const canProceed=isValid;return{isValid,missingFields,errorMessages,canProceed};},[currentStep,form,errors]);// Check if current step has errors\nconst hasStepErrors=useCallback(()=>{const section=FORM_SECTIONS[currentStep];if(!section)return false;return section.fields.some(field=>errors[field]);},[currentStep,errors]);// Get validation summary for current step\nconst getCurrentStepValidation=useCallback(()=>{return validateCurrentStep();},[validateCurrentStep]);// Get validation summary for specific step\nconst getStepValidation=useCallback(stepIndex=>{const section=FORM_SECTIONS[stepIndex];if(!section){return{isValid:false,missingFields:[],errorMessages:['Section invalide'],canProceed:false};}const missingFields=[];const errorMessages=[];section.requiredFields.forEach(field=>{const value=form[field];let isValid=true;if(typeof value==='string'){isValid=value.trim()!=='';}else if(typeof value==='number'){isValid=value>0;}else if(typeof value==='boolean'){isValid=true;}else{isValid=value!==undefined&&value!==null;}if(!isValid){missingFields.push(field);errorMessages.push(section.validationMessages[field]||`Le champ ${field} est requis`);}});const isValid=missingFields.length===0;const canProceed=isValid;return{isValid,missingFields,errorMessages,canProceed};},[form]);// Go to next step\nconst nextStep=useCallback(()=>{if(currentStep>=FORM_SECTIONS.length-1){return false;// Already on last step\n}const validation=validateCurrentStep();if(!validation.canProceed){return false;// Current step is not valid\n}// Mark current step as completed\nsetCompletedSteps(prev=>new Set(prev).add(currentStep));// Move to next step\nconst nextStepIndex=currentStep+1;setCurrentStep(nextStepIndex);// Check if we just arrived on the last step\nif(nextStepIndex===FORM_SECTIONS.length-1){setJustArrivedOnLastStep(true);}return true;},[currentStep,validateCurrentStep]);// Go to previous step\nconst prevStep=useCallback(()=>{if(currentStep<=0){return false;// Already on first step\n}setCurrentStep(prev=>prev-1);setJustArrivedOnLastStep(false);return true;},[currentStep]);// Go to specific step\nconst goToStep=useCallback(stepIndex=>{if(stepIndex<0||stepIndex>=FORM_SECTIONS.length){return false;// Invalid step index\n}// Only allow going to completed steps or the next available step\nif(stepIndex>currentStep&&!completedSteps.has(stepIndex-1)){return false;// Cannot skip steps\n}setCurrentStep(stepIndex);setJustArrivedOnLastStep(stepIndex===FORM_SECTIONS.length-1);return true;},[currentStep,completedSteps]);// Check if form is ready for submission\nconst isFormReadyForSubmission=useCallback(()=>{// Must be on last step\nif(currentStep!==FORM_SECTIONS.length-1){return false;}// All steps must be completed\nif(completedSteps.size<FORM_SECTIONS.length-1){return false;}// Current step must be valid\nreturn validateCurrentStep().canProceed;},[currentStep,completedSteps,validateCurrentStep]);// Get current section\nconst getCurrentSection=useCallback(()=>{return FORM_SECTIONS[currentStep];},[currentStep]);// Get section by index\nconst getSection=useCallback(index=>{return FORM_SECTIONS[index];},[]);return{// State\ncurrentStep,completedSteps,justArrivedOnLastStep,// Actions\nnextStep,prevStep,goToStep,// Computed values\nisStepCompleted,validateCurrentStep,hasStepErrors,isFormReadyForSubmission,getCurrentSection,getSection,getCurrentStepValidation,getStepValidation,// Constants\ntotalSteps:FORM_SECTIONS.length,sections:FORM_SECTIONS};};","map":{"version":3,"names":["useState","useCallback","FORM_SECTIONS","id","title","description","fields","requiredFields","validationMessages","symbol","isin","fullName","depositType","lotSize","underlyingType","underlyingId","firstTradingDate","lastTraadingDate","tradingCurrency","tickSize","settlementMethod","useFormNavigation","form","errors","currentStep","setCurrentStep","completedSteps","setCompletedSteps","Set","justArrivedOnLastStep","setJustArrivedOnLastStep","isStepCompleted","stepIndex","section","every","field","value","trim","undefined","validateCurrentStep","isValid","missingFields","errorMessages","canProceed","forEach","push","length","hasStepErrors","some","getCurrentStepValidation","getStepValidation","nextStep","validation","prev","add","nextStepIndex","prevStep","goToStep","has","isFormReadyForSubmission","size","getCurrentSection","getSection","index","totalSteps","sections"],"sources":["C:/Users/chemseddine/Desktop/frontend/src/components/forms/FutureCreationForm/hooks/useFormNavigation.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { FutureFormData } from '../schemas/futureFormSchema';\r\n\r\n// Define form sections with their required fields and validation rules\r\nexport interface FormSection {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  fields: (keyof FutureFormData)[];\r\n  requiredFields: (keyof FutureFormData)[];\r\n  validationMessages: Record<string, string>;\r\n}\r\n\r\nexport const FORM_SECTIONS: FormSection[] = [\r\n  {\r\n    id: 'identification',\r\n    title: \"Identification de l'instrument\",\r\n    description: \"Informations de base\",\r\n    fields: ['symbol', 'description', 'isin', 'expirationCode', 'parentTicker', 'fullName', 'segment', 'maturityDate'],\r\n    requiredFields: ['symbol', 'isin', 'fullName'],\r\n    validationMessages: {\r\n      symbol: 'Le symbole est requis pour identifier l\\'instrument',\r\n      isin: 'Le code ISIN est obligatoire',\r\n      fullName: 'Le nom complet de l\\'instrument est requis'\r\n    }\r\n  },\r\n  {\r\n    id: 'deposit',\r\n    title: \"Dépôt & sous-jacents\",\r\n    description: \"Configuration des marges\",\r\n    fields: ['depositType', 'lotSize', 'initialMarginAmount', 'percentageMargin', 'underlyingType', 'underlyingId'],\r\n    requiredFields: ['depositType', 'lotSize', 'underlyingType', 'underlyingId'],\r\n    validationMessages: {\r\n      depositType: 'Veuillez sélectionner le type de dépôt',\r\n      lotSize: 'La taille de lot doit être supérieure à 0',\r\n      underlyingType: 'Veuillez sélectionner le type de sous-jacent',\r\n      underlyingId: 'Veuillez sélectionner un sous-jacent'\r\n    }\r\n  },\r\n  {\r\n    id: 'trading',\r\n    title: \"Négociation\",\r\n    description: \"Paramètres de trading\",\r\n    fields: ['firstTradingDate', 'lastTraadingDate', 'tradingCurrency', 'tickSize', 'settlementMethod', 'instrumentStatus'],\r\n    requiredFields: ['firstTradingDate', 'lastTraadingDate', 'tradingCurrency', 'tickSize', 'settlementMethod'],\r\n    validationMessages: {\r\n      firstTradingDate: 'La date de première négociation est requise',\r\n      lastTraadingDate: 'La date de dernière négociation est requise',\r\n      tradingCurrency: 'La devise de négociation est obligatoire',\r\n      tickSize: 'Le tick size doit être supérieur à 0',\r\n      settlementMethod: 'Veuillez sélectionner la méthode de règlement'\r\n    }\r\n  }\r\n];\r\n\r\nexport interface StepValidationResult {\r\n  isValid: boolean;\r\n  missingFields: string[];\r\n  errorMessages: string[];\r\n  canProceed: boolean;\r\n}\r\n\r\nexport const useFormNavigation = (form: FutureFormData, errors: Record<string, string>) => {\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [completedSteps, setCompletedSteps] = useState<Set<number>>(new Set());\r\n  const [justArrivedOnLastStep, setJustArrivedOnLastStep] = useState(false);\r\n\r\n  // Check if a step is completed\r\n  const isStepCompleted = useCallback((stepIndex: number): boolean => {\r\n    const section = FORM_SECTIONS[stepIndex];\r\n    if (!section) return false;\r\n\r\n    return section.requiredFields.every(field => {\r\n      const value = form[field];\r\n      if (typeof value === 'string') {\r\n        return value.trim() !== '';\r\n      }\r\n      if (typeof value === 'number') {\r\n        return value > 0;\r\n      }\r\n      if (typeof value === 'boolean') {\r\n        return true; // Boolean fields are always considered valid\r\n      }\r\n      return value !== undefined && value !== null;\r\n    });\r\n  }, [form]);\r\n\r\n  // Validate current step with detailed feedback\r\n  const validateCurrentStep = useCallback((): StepValidationResult => {\r\n    const section = FORM_SECTIONS[currentStep];\r\n    if (!section) {\r\n      return {\r\n        isValid: false,\r\n        missingFields: [],\r\n        errorMessages: ['Section invalide'],\r\n        canProceed: false\r\n      };\r\n    }\r\n\r\n    const missingFields: string[] = [];\r\n    const errorMessages: string[] = [];\r\n\r\n    // Check required fields\r\n    section.requiredFields.forEach(field => {\r\n      const value = form[field];\r\n      let isValid = true;\r\n\r\n      if (typeof value === 'string') {\r\n        isValid = value.trim() !== '';\r\n      } else if (typeof value === 'number') {\r\n        isValid = value > 0;\r\n      } else if (typeof value === 'boolean') {\r\n        isValid = true;\r\n      } else {\r\n        isValid = value !== undefined && value !== null;\r\n      }\r\n\r\n      if (!isValid) {\r\n        missingFields.push(field as string);\r\n        errorMessages.push(section.validationMessages[field as string] || `Le champ ${field} est requis`);\r\n      }\r\n    });\r\n\r\n    // Check for validation errors\r\n    section.fields.forEach(field => {\r\n      if (errors[field as string]) {\r\n        errorMessages.push(errors[field as string]);\r\n      }\r\n    });\r\n\r\n    const isValid = missingFields.length === 0 && errorMessages.length === 0;\r\n    const canProceed = isValid;\r\n\r\n    return {\r\n      isValid,\r\n      missingFields,\r\n      errorMessages,\r\n      canProceed\r\n    };\r\n  }, [currentStep, form, errors]);\r\n\r\n  // Check if current step has errors\r\n  const hasStepErrors = useCallback((): boolean => {\r\n    const section = FORM_SECTIONS[currentStep];\r\n    if (!section) return false;\r\n\r\n    return section.fields.some(field => errors[field as string]);\r\n  }, [currentStep, errors]);\r\n\r\n  // Get validation summary for current step\r\n  const getCurrentStepValidation = useCallback((): StepValidationResult => {\r\n    return validateCurrentStep();\r\n  }, [validateCurrentStep]);\r\n\r\n  // Get validation summary for specific step\r\n  const getStepValidation = useCallback((stepIndex: number): StepValidationResult => {\r\n    const section = FORM_SECTIONS[stepIndex];\r\n    if (!section) {\r\n      return {\r\n        isValid: false,\r\n        missingFields: [],\r\n        errorMessages: ['Section invalide'],\r\n        canProceed: false\r\n      };\r\n    }\r\n\r\n    const missingFields: string[] = [];\r\n    const errorMessages: string[] = [];\r\n\r\n    section.requiredFields.forEach(field => {\r\n      const value = form[field];\r\n      let isValid = true;\r\n\r\n      if (typeof value === 'string') {\r\n        isValid = value.trim() !== '';\r\n      } else if (typeof value === 'number') {\r\n        isValid = value > 0;\r\n      } else if (typeof value === 'boolean') {\r\n        isValid = true;\r\n      } else {\r\n        isValid = value !== undefined && value !== null;\r\n      }\r\n\r\n      if (!isValid) {\r\n        missingFields.push(field as string);\r\n        errorMessages.push(section.validationMessages[field as string] || `Le champ ${field} est requis`);\r\n      }\r\n    });\r\n\r\n    const isValid = missingFields.length === 0;\r\n    const canProceed = isValid;\r\n\r\n    return {\r\n      isValid,\r\n      missingFields,\r\n      errorMessages,\r\n      canProceed\r\n    };\r\n  }, [form]);\r\n\r\n  // Go to next step\r\n  const nextStep = useCallback((): boolean => {\r\n    if (currentStep >= FORM_SECTIONS.length - 1) {\r\n      return false; // Already on last step\r\n    }\r\n\r\n    const validation = validateCurrentStep();\r\n    if (!validation.canProceed) {\r\n      return false; // Current step is not valid\r\n    }\r\n\r\n    // Mark current step as completed\r\n    setCompletedSteps(prev => new Set(prev).add(currentStep));\r\n    \r\n    // Move to next step\r\n    const nextStepIndex = currentStep + 1;\r\n    setCurrentStep(nextStepIndex);\r\n\r\n    // Check if we just arrived on the last step\r\n    if (nextStepIndex === FORM_SECTIONS.length - 1) {\r\n      setJustArrivedOnLastStep(true);\r\n    }\r\n\r\n    return true;\r\n  }, [currentStep, validateCurrentStep]);\r\n\r\n  // Go to previous step\r\n  const prevStep = useCallback((): boolean => {\r\n    if (currentStep <= 0) {\r\n      return false; // Already on first step\r\n    }\r\n\r\n    setCurrentStep(prev => prev - 1);\r\n    setJustArrivedOnLastStep(false);\r\n    return true;\r\n  }, [currentStep]);\r\n\r\n  // Go to specific step\r\n  const goToStep = useCallback((stepIndex: number): boolean => {\r\n    if (stepIndex < 0 || stepIndex >= FORM_SECTIONS.length) {\r\n      return false; // Invalid step index\r\n    }\r\n\r\n    // Only allow going to completed steps or the next available step\r\n    if (stepIndex > currentStep && !completedSteps.has(stepIndex - 1)) {\r\n      return false; // Cannot skip steps\r\n    }\r\n\r\n    setCurrentStep(stepIndex);\r\n    setJustArrivedOnLastStep(stepIndex === FORM_SECTIONS.length - 1);\r\n    return true;\r\n  }, [currentStep, completedSteps]);\r\n\r\n  // Check if form is ready for submission\r\n  const isFormReadyForSubmission = useCallback((): boolean => {\r\n    // Must be on last step\r\n    if (currentStep !== FORM_SECTIONS.length - 1) {\r\n      return false;\r\n    }\r\n\r\n    // All steps must be completed\r\n    if (completedSteps.size < FORM_SECTIONS.length - 1) {\r\n      return false;\r\n    }\r\n\r\n    // Current step must be valid\r\n    return validateCurrentStep().canProceed;\r\n  }, [currentStep, completedSteps, validateCurrentStep]);\r\n\r\n  // Get current section\r\n  const getCurrentSection = useCallback((): FormSection | undefined => {\r\n    return FORM_SECTIONS[currentStep];\r\n  }, [currentStep]);\r\n\r\n  // Get section by index\r\n  const getSection = useCallback((index: number): FormSection | undefined => {\r\n    return FORM_SECTIONS[index];\r\n  }, []);\r\n\r\n\r\n\r\n  return {\r\n    // State\r\n    currentStep,\r\n    completedSteps,\r\n    justArrivedOnLastStep,\r\n    \r\n    // Actions\r\n    nextStep,\r\n    prevStep,\r\n    goToStep,\r\n    \r\n    // Computed values\r\n    isStepCompleted,\r\n    validateCurrentStep,\r\n    hasStepErrors,\r\n    isFormReadyForSubmission,\r\n    getCurrentSection,\r\n    getSection,\r\n    getCurrentStepValidation,\r\n    getStepValidation,\r\n    \r\n    // Constants\r\n    totalSteps: FORM_SECTIONS.length,\r\n    sections: FORM_SECTIONS,\r\n  };\r\n};\r\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,WAAW,KAAQ,OAAO,CAG7C;AAUA,MAAO,MAAM,CAAAC,aAA4B,CAAG,CAC1C,CACEC,EAAE,CAAE,gBAAgB,CACpBC,KAAK,CAAE,gCAAgC,CACvCC,WAAW,CAAE,sBAAsB,CACnCC,MAAM,CAAE,CAAC,QAAQ,CAAE,aAAa,CAAE,MAAM,CAAE,gBAAgB,CAAE,cAAc,CAAE,UAAU,CAAE,SAAS,CAAE,cAAc,CAAC,CAClHC,cAAc,CAAE,CAAC,QAAQ,CAAE,MAAM,CAAE,UAAU,CAAC,CAC9CC,kBAAkB,CAAE,CAClBC,MAAM,CAAE,qDAAqD,CAC7DC,IAAI,CAAE,8BAA8B,CACpCC,QAAQ,CAAE,4CACZ,CACF,CAAC,CACD,CACER,EAAE,CAAE,SAAS,CACbC,KAAK,CAAE,sBAAsB,CAC7BC,WAAW,CAAE,0BAA0B,CACvCC,MAAM,CAAE,CAAC,aAAa,CAAE,SAAS,CAAE,qBAAqB,CAAE,kBAAkB,CAAE,gBAAgB,CAAE,cAAc,CAAC,CAC/GC,cAAc,CAAE,CAAC,aAAa,CAAE,SAAS,CAAE,gBAAgB,CAAE,cAAc,CAAC,CAC5EC,kBAAkB,CAAE,CAClBI,WAAW,CAAE,wCAAwC,CACrDC,OAAO,CAAE,2CAA2C,CACpDC,cAAc,CAAE,8CAA8C,CAC9DC,YAAY,CAAE,sCAChB,CACF,CAAC,CACD,CACEZ,EAAE,CAAE,SAAS,CACbC,KAAK,CAAE,aAAa,CACpBC,WAAW,CAAE,uBAAuB,CACpCC,MAAM,CAAE,CAAC,kBAAkB,CAAE,kBAAkB,CAAE,iBAAiB,CAAE,UAAU,CAAE,kBAAkB,CAAE,kBAAkB,CAAC,CACvHC,cAAc,CAAE,CAAC,kBAAkB,CAAE,kBAAkB,CAAE,iBAAiB,CAAE,UAAU,CAAE,kBAAkB,CAAC,CAC3GC,kBAAkB,CAAE,CAClBQ,gBAAgB,CAAE,6CAA6C,CAC/DC,gBAAgB,CAAE,6CAA6C,CAC/DC,eAAe,CAAE,0CAA0C,CAC3DC,QAAQ,CAAE,sCAAsC,CAChDC,gBAAgB,CAAE,+CACpB,CACF,CAAC,CACF,CASD,MAAO,MAAM,CAAAC,iBAAiB,CAAGA,CAACC,IAAoB,CAAEC,MAA8B,GAAK,CACzF,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGzB,QAAQ,CAAC,CAAC,CAAC,CACjD,KAAM,CAAC0B,cAAc,CAAEC,iBAAiB,CAAC,CAAG3B,QAAQ,CAAc,GAAI,CAAA4B,GAAG,CAAC,CAAC,CAAC,CAC5E,KAAM,CAACC,qBAAqB,CAAEC,wBAAwB,CAAC,CAAG9B,QAAQ,CAAC,KAAK,CAAC,CAEzE;AACA,KAAM,CAAA+B,eAAe,CAAG9B,WAAW,CAAE+B,SAAiB,EAAc,CAClE,KAAM,CAAAC,OAAO,CAAG/B,aAAa,CAAC8B,SAAS,CAAC,CACxC,GAAI,CAACC,OAAO,CAAE,MAAO,MAAK,CAE1B,MAAO,CAAAA,OAAO,CAAC1B,cAAc,CAAC2B,KAAK,CAACC,KAAK,EAAI,CAC3C,KAAM,CAAAC,KAAK,CAAGd,IAAI,CAACa,KAAK,CAAC,CACzB,GAAI,MAAO,CAAAC,KAAK,GAAK,QAAQ,CAAE,CAC7B,MAAO,CAAAA,KAAK,CAACC,IAAI,CAAC,CAAC,GAAK,EAAE,CAC5B,CACA,GAAI,MAAO,CAAAD,KAAK,GAAK,QAAQ,CAAE,CAC7B,MAAO,CAAAA,KAAK,CAAG,CAAC,CAClB,CACA,GAAI,MAAO,CAAAA,KAAK,GAAK,SAAS,CAAE,CAC9B,MAAO,KAAI,CAAE;AACf,CACA,MAAO,CAAAA,KAAK,GAAKE,SAAS,EAAIF,KAAK,GAAK,IAAI,CAC9C,CAAC,CAAC,CACJ,CAAC,CAAE,CAACd,IAAI,CAAC,CAAC,CAEV;AACA,KAAM,CAAAiB,mBAAmB,CAAGtC,WAAW,CAAC,IAA4B,CAClE,KAAM,CAAAgC,OAAO,CAAG/B,aAAa,CAACsB,WAAW,CAAC,CAC1C,GAAI,CAACS,OAAO,CAAE,CACZ,MAAO,CACLO,OAAO,CAAE,KAAK,CACdC,aAAa,CAAE,EAAE,CACjBC,aAAa,CAAE,CAAC,kBAAkB,CAAC,CACnCC,UAAU,CAAE,KACd,CAAC,CACH,CAEA,KAAM,CAAAF,aAAuB,CAAG,EAAE,CAClC,KAAM,CAAAC,aAAuB,CAAG,EAAE,CAElC;AACAT,OAAO,CAAC1B,cAAc,CAACqC,OAAO,CAACT,KAAK,EAAI,CACtC,KAAM,CAAAC,KAAK,CAAGd,IAAI,CAACa,KAAK,CAAC,CACzB,GAAI,CAAAK,OAAO,CAAG,IAAI,CAElB,GAAI,MAAO,CAAAJ,KAAK,GAAK,QAAQ,CAAE,CAC7BI,OAAO,CAAGJ,KAAK,CAACC,IAAI,CAAC,CAAC,GAAK,EAAE,CAC/B,CAAC,IAAM,IAAI,MAAO,CAAAD,KAAK,GAAK,QAAQ,CAAE,CACpCI,OAAO,CAAGJ,KAAK,CAAG,CAAC,CACrB,CAAC,IAAM,IAAI,MAAO,CAAAA,KAAK,GAAK,SAAS,CAAE,CACrCI,OAAO,CAAG,IAAI,CAChB,CAAC,IAAM,CACLA,OAAO,CAAGJ,KAAK,GAAKE,SAAS,EAAIF,KAAK,GAAK,IAAI,CACjD,CAEA,GAAI,CAACI,OAAO,CAAE,CACZC,aAAa,CAACI,IAAI,CAACV,KAAe,CAAC,CACnCO,aAAa,CAACG,IAAI,CAACZ,OAAO,CAACzB,kBAAkB,CAAC2B,KAAK,CAAW,EAAI,YAAYA,KAAK,aAAa,CAAC,CACnG,CACF,CAAC,CAAC,CAEF;AACAF,OAAO,CAAC3B,MAAM,CAACsC,OAAO,CAACT,KAAK,EAAI,CAC9B,GAAIZ,MAAM,CAACY,KAAK,CAAW,CAAE,CAC3BO,aAAa,CAACG,IAAI,CAACtB,MAAM,CAACY,KAAK,CAAW,CAAC,CAC7C,CACF,CAAC,CAAC,CAEF,KAAM,CAAAK,OAAO,CAAGC,aAAa,CAACK,MAAM,GAAK,CAAC,EAAIJ,aAAa,CAACI,MAAM,GAAK,CAAC,CACxE,KAAM,CAAAH,UAAU,CAAGH,OAAO,CAE1B,MAAO,CACLA,OAAO,CACPC,aAAa,CACbC,aAAa,CACbC,UACF,CAAC,CACH,CAAC,CAAE,CAACnB,WAAW,CAAEF,IAAI,CAAEC,MAAM,CAAC,CAAC,CAE/B;AACA,KAAM,CAAAwB,aAAa,CAAG9C,WAAW,CAAC,IAAe,CAC/C,KAAM,CAAAgC,OAAO,CAAG/B,aAAa,CAACsB,WAAW,CAAC,CAC1C,GAAI,CAACS,OAAO,CAAE,MAAO,MAAK,CAE1B,MAAO,CAAAA,OAAO,CAAC3B,MAAM,CAAC0C,IAAI,CAACb,KAAK,EAAIZ,MAAM,CAACY,KAAK,CAAW,CAAC,CAC9D,CAAC,CAAE,CAACX,WAAW,CAAED,MAAM,CAAC,CAAC,CAEzB;AACA,KAAM,CAAA0B,wBAAwB,CAAGhD,WAAW,CAAC,IAA4B,CACvE,MAAO,CAAAsC,mBAAmB,CAAC,CAAC,CAC9B,CAAC,CAAE,CAACA,mBAAmB,CAAC,CAAC,CAEzB;AACA,KAAM,CAAAW,iBAAiB,CAAGjD,WAAW,CAAE+B,SAAiB,EAA2B,CACjF,KAAM,CAAAC,OAAO,CAAG/B,aAAa,CAAC8B,SAAS,CAAC,CACxC,GAAI,CAACC,OAAO,CAAE,CACZ,MAAO,CACLO,OAAO,CAAE,KAAK,CACdC,aAAa,CAAE,EAAE,CACjBC,aAAa,CAAE,CAAC,kBAAkB,CAAC,CACnCC,UAAU,CAAE,KACd,CAAC,CACH,CAEA,KAAM,CAAAF,aAAuB,CAAG,EAAE,CAClC,KAAM,CAAAC,aAAuB,CAAG,EAAE,CAElCT,OAAO,CAAC1B,cAAc,CAACqC,OAAO,CAACT,KAAK,EAAI,CACtC,KAAM,CAAAC,KAAK,CAAGd,IAAI,CAACa,KAAK,CAAC,CACzB,GAAI,CAAAK,OAAO,CAAG,IAAI,CAElB,GAAI,MAAO,CAAAJ,KAAK,GAAK,QAAQ,CAAE,CAC7BI,OAAO,CAAGJ,KAAK,CAACC,IAAI,CAAC,CAAC,GAAK,EAAE,CAC/B,CAAC,IAAM,IAAI,MAAO,CAAAD,KAAK,GAAK,QAAQ,CAAE,CACpCI,OAAO,CAAGJ,KAAK,CAAG,CAAC,CACrB,CAAC,IAAM,IAAI,MAAO,CAAAA,KAAK,GAAK,SAAS,CAAE,CACrCI,OAAO,CAAG,IAAI,CAChB,CAAC,IAAM,CACLA,OAAO,CAAGJ,KAAK,GAAKE,SAAS,EAAIF,KAAK,GAAK,IAAI,CACjD,CAEA,GAAI,CAACI,OAAO,CAAE,CACZC,aAAa,CAACI,IAAI,CAACV,KAAe,CAAC,CACnCO,aAAa,CAACG,IAAI,CAACZ,OAAO,CAACzB,kBAAkB,CAAC2B,KAAK,CAAW,EAAI,YAAYA,KAAK,aAAa,CAAC,CACnG,CACF,CAAC,CAAC,CAEF,KAAM,CAAAK,OAAO,CAAGC,aAAa,CAACK,MAAM,GAAK,CAAC,CAC1C,KAAM,CAAAH,UAAU,CAAGH,OAAO,CAE1B,MAAO,CACLA,OAAO,CACPC,aAAa,CACbC,aAAa,CACbC,UACF,CAAC,CACH,CAAC,CAAE,CAACrB,IAAI,CAAC,CAAC,CAEV;AACA,KAAM,CAAA6B,QAAQ,CAAGlD,WAAW,CAAC,IAAe,CAC1C,GAAIuB,WAAW,EAAItB,aAAa,CAAC4C,MAAM,CAAG,CAAC,CAAE,CAC3C,MAAO,MAAK,CAAE;AAChB,CAEA,KAAM,CAAAM,UAAU,CAAGb,mBAAmB,CAAC,CAAC,CACxC,GAAI,CAACa,UAAU,CAACT,UAAU,CAAE,CAC1B,MAAO,MAAK,CAAE;AAChB,CAEA;AACAhB,iBAAiB,CAAC0B,IAAI,EAAI,GAAI,CAAAzB,GAAG,CAACyB,IAAI,CAAC,CAACC,GAAG,CAAC9B,WAAW,CAAC,CAAC,CAEzD;AACA,KAAM,CAAA+B,aAAa,CAAG/B,WAAW,CAAG,CAAC,CACrCC,cAAc,CAAC8B,aAAa,CAAC,CAE7B;AACA,GAAIA,aAAa,GAAKrD,aAAa,CAAC4C,MAAM,CAAG,CAAC,CAAE,CAC9ChB,wBAAwB,CAAC,IAAI,CAAC,CAChC,CAEA,MAAO,KAAI,CACb,CAAC,CAAE,CAACN,WAAW,CAAEe,mBAAmB,CAAC,CAAC,CAEtC;AACA,KAAM,CAAAiB,QAAQ,CAAGvD,WAAW,CAAC,IAAe,CAC1C,GAAIuB,WAAW,EAAI,CAAC,CAAE,CACpB,MAAO,MAAK,CAAE;AAChB,CAEAC,cAAc,CAAC4B,IAAI,EAAIA,IAAI,CAAG,CAAC,CAAC,CAChCvB,wBAAwB,CAAC,KAAK,CAAC,CAC/B,MAAO,KAAI,CACb,CAAC,CAAE,CAACN,WAAW,CAAC,CAAC,CAEjB;AACA,KAAM,CAAAiC,QAAQ,CAAGxD,WAAW,CAAE+B,SAAiB,EAAc,CAC3D,GAAIA,SAAS,CAAG,CAAC,EAAIA,SAAS,EAAI9B,aAAa,CAAC4C,MAAM,CAAE,CACtD,MAAO,MAAK,CAAE;AAChB,CAEA;AACA,GAAId,SAAS,CAAGR,WAAW,EAAI,CAACE,cAAc,CAACgC,GAAG,CAAC1B,SAAS,CAAG,CAAC,CAAC,CAAE,CACjE,MAAO,MAAK,CAAE;AAChB,CAEAP,cAAc,CAACO,SAAS,CAAC,CACzBF,wBAAwB,CAACE,SAAS,GAAK9B,aAAa,CAAC4C,MAAM,CAAG,CAAC,CAAC,CAChE,MAAO,KAAI,CACb,CAAC,CAAE,CAACtB,WAAW,CAAEE,cAAc,CAAC,CAAC,CAEjC;AACA,KAAM,CAAAiC,wBAAwB,CAAG1D,WAAW,CAAC,IAAe,CAC1D;AACA,GAAIuB,WAAW,GAAKtB,aAAa,CAAC4C,MAAM,CAAG,CAAC,CAAE,CAC5C,MAAO,MAAK,CACd,CAEA;AACA,GAAIpB,cAAc,CAACkC,IAAI,CAAG1D,aAAa,CAAC4C,MAAM,CAAG,CAAC,CAAE,CAClD,MAAO,MAAK,CACd,CAEA;AACA,MAAO,CAAAP,mBAAmB,CAAC,CAAC,CAACI,UAAU,CACzC,CAAC,CAAE,CAACnB,WAAW,CAAEE,cAAc,CAAEa,mBAAmB,CAAC,CAAC,CAEtD;AACA,KAAM,CAAAsB,iBAAiB,CAAG5D,WAAW,CAAC,IAA+B,CACnE,MAAO,CAAAC,aAAa,CAACsB,WAAW,CAAC,CACnC,CAAC,CAAE,CAACA,WAAW,CAAC,CAAC,CAEjB;AACA,KAAM,CAAAsC,UAAU,CAAG7D,WAAW,CAAE8D,KAAa,EAA8B,CACzE,MAAO,CAAA7D,aAAa,CAAC6D,KAAK,CAAC,CAC7B,CAAC,CAAE,EAAE,CAAC,CAIN,MAAO,CACL;AACAvC,WAAW,CACXE,cAAc,CACdG,qBAAqB,CAErB;AACAsB,QAAQ,CACRK,QAAQ,CACRC,QAAQ,CAER;AACA1B,eAAe,CACfQ,mBAAmB,CACnBQ,aAAa,CACbY,wBAAwB,CACxBE,iBAAiB,CACjBC,UAAU,CACVb,wBAAwB,CACxBC,iBAAiB,CAEjB;AACAc,UAAU,CAAE9D,aAAa,CAAC4C,MAAM,CAChCmB,QAAQ,CAAE/D,aACZ,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}