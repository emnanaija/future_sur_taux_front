{"ast":null,"code":"export class FutureCalculationService {\n  /**\r\n   * Calculate tick value based on tick size and contract multiplier\r\n   */\n  static calculateTickValue(tickSize, contractMultiplier) {\n    if (tickSize <= 0 || contractMultiplier <= 0) return 0;\n    return tickSize * contractMultiplier;\n  }\n\n  /**\r\n   * Calculate contract multiplier based on tick size and tick value\r\n   */\n  static calculateContractMultiplier(tickSize, tickValue) {\n    if (tickSize <= 0) return 0;\n    return tickValue / tickSize;\n  }\n\n  /**\r\n   * Calculate initial margin amount based on lot size and percentage margin\r\n   */\n  static calculateInitialMarginAmount(lotSize, percentageMargin) {\n    if (lotSize <= 0 || percentageMargin <= 0) return 0;\n    return lotSize * percentageMargin;\n  }\n\n  /**\r\n   * Calculate percentage margin based on lot size and initial margin amount\r\n   */\n  static calculatePercentageMargin(lotSize, initialMarginAmount) {\n    if (lotSize <= 0) return 0;\n    return initialMarginAmount / lotSize;\n  }\n\n  /**\r\n   * Parse tick size from string input\r\n   */\n  static parseTickSize(str) {\n    if (!str) return 0;\n    const val = parseFloat(str);\n    return isNaN(val) ? 0 : val;\n  }\n\n  /**\r\n   * Parse percentage margin from string input\r\n   */\n  static parsePercentageMargin(str) {\n    if (!str) return 0;\n    const val = parseFloat(str);\n    return isNaN(val) ? 0 : val;\n  }\n\n  /**\r\n   * Parse initial margin amount from string input\r\n   */\n  static parseInitialMarginAmount(str) {\n    if (!str) return 0;\n    const val = parseFloat(str);\n    return isNaN(val) ? 0 : val;\n  }\n\n  /**\r\n   * Update form with calculated values based on deposit type\r\n   */\n  static updateFormCalculations(form, depositType, lotSize) {\n    if (depositType === 'RATE') {\n      // For rate-based deposits, calculate initial margin from percentage\n      return {\n        initialMarginAmount: this.calculateInitialMarginAmount(lotSize, form.percentageMargin)\n      };\n    } else if (depositType === 'AMOUNT') {\n      // For amount-based deposits, calculate percentage from initial margin\n      return {\n        percentageMargin: this.calculatePercentageMargin(lotSize, form.initialMarginAmount)\n      };\n    }\n    return {};\n  }\n\n  /**\r\n   * Update tick-related calculations based on edit mode\r\n   */\n  static updateTickCalculations(tickSize, editMode, tickValueInput, contractMultiplierInput) {\n    if (editMode === 'tickValue') {\n      const contractMultiplier = this.calculateContractMultiplier(tickSize, tickValueInput);\n      return {\n        tickValue: tickValueInput,\n        contractMultiplier\n      };\n    } else {\n      const tickValue = this.calculateTickValue(tickSize, contractMultiplierInput);\n      return {\n        tickValue,\n        contractMultiplier: contractMultiplierInput\n      };\n    }\n  }\n}","map":{"version":3,"names":["FutureCalculationService","calculateTickValue","tickSize","contractMultiplier","calculateContractMultiplier","tickValue","calculateInitialMarginAmount","lotSize","percentageMargin","calculatePercentageMargin","initialMarginAmount","parseTickSize","str","val","parseFloat","isNaN","parsePercentageMargin","parseInitialMarginAmount","updateFormCalculations","form","depositType","updateTickCalculations","editMode","tickValueInput","contractMultiplierInput"],"sources":["C:/Users/chemseddine/Desktop/future_sur_taux/frontend/src/components/forms/FutureCreationForm/services/futureCalculationService.ts"],"sourcesContent":["import { FutureFormData } from '../schemas/futureFormSchema';\r\n\r\nexport class FutureCalculationService {\r\n  /**\r\n   * Calculate tick value based on tick size and contract multiplier\r\n   */\r\n  static calculateTickValue(tickSize: number, contractMultiplier: number): number {\r\n    if (tickSize <= 0 || contractMultiplier <= 0) return 0;\r\n    return tickSize * contractMultiplier;\r\n  }\r\n\r\n  /**\r\n   * Calculate contract multiplier based on tick size and tick value\r\n   */\r\n  static calculateContractMultiplier(tickSize: number, tickValue: number): number {\r\n    if (tickSize <= 0) return 0;\r\n    return tickValue / tickSize;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial margin amount based on lot size and percentage margin\r\n   */\r\n  static calculateInitialMarginAmount(lotSize: number, percentageMargin: number): number {\r\n    if (lotSize <= 0 || percentageMargin <= 0) return 0;\r\n    return lotSize * percentageMargin;\r\n  }\r\n\r\n  /**\r\n   * Calculate percentage margin based on lot size and initial margin amount\r\n   */\r\n  static calculatePercentageMargin(lotSize: number, initialMarginAmount: number): number {\r\n    if (lotSize <= 0) return 0;\r\n    return initialMarginAmount / lotSize;\r\n  }\r\n\r\n  /**\r\n   * Parse tick size from string input\r\n   */\r\n  static parseTickSize(str: string): number {\r\n    if (!str) return 0;\r\n    const val = parseFloat(str);\r\n    return isNaN(val) ? 0 : val;\r\n  }\r\n\r\n  /**\r\n   * Parse percentage margin from string input\r\n   */\r\n  static parsePercentageMargin(str: string): number {\r\n    if (!str) return 0;\r\n    const val = parseFloat(str);\r\n    return isNaN(val) ? 0 : val;\r\n  }\r\n\r\n  /**\r\n   * Parse initial margin amount from string input\r\n   */\r\n  static parseInitialMarginAmount(str: string): number {\r\n    if (!str) return 0;\r\n    const val = parseFloat(str);\r\n    return isNaN(val) ? 0 : val;\r\n  }\r\n\r\n  /**\r\n   * Update form with calculated values based on deposit type\r\n   */\r\n  static updateFormCalculations(\r\n    form: FutureFormData,\r\n    depositType: string,\r\n    lotSize: number\r\n  ): PartialFutureFormData {\r\n    if (depositType === 'RATE') {\r\n      // For rate-based deposits, calculate initial margin from percentage\r\n      return {\r\n        initialMarginAmount: this.calculateInitialMarginAmount(lotSize, form.percentageMargin)\r\n      };\r\n    } else if (depositType === 'AMOUNT') {\r\n      // For amount-based deposits, calculate percentage from initial margin\r\n      return {\r\n        percentageMargin: this.calculatePercentageMargin(lotSize, form.initialMarginAmount)\r\n      };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Update tick-related calculations based on edit mode\r\n   */\r\n  static updateTickCalculations(\r\n    tickSize: number,\r\n    editMode: 'tickValue' | 'contractMultiplier',\r\n    tickValueInput: number,\r\n    contractMultiplierInput: number\r\n  ): { tickValue: number; contractMultiplier: number } {\r\n    if (editMode === 'tickValue') {\r\n      const contractMultiplier = this.calculateContractMultiplier(tickSize, tickValueInput);\r\n      return {\r\n        tickValue: tickValueInput,\r\n        contractMultiplier\r\n      };\r\n    } else {\r\n      const tickValue = this.calculateTickValue(tickSize, contractMultiplierInput);\r\n      return {\r\n        tickValue,\r\n        contractMultiplier: contractMultiplierInput\r\n      };\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAEA,OAAO,MAAMA,wBAAwB,CAAC;EACpC;AACF;AACA;EACE,OAAOC,kBAAkBA,CAACC,QAAgB,EAAEC,kBAA0B,EAAU;IAC9E,IAAID,QAAQ,IAAI,CAAC,IAAIC,kBAAkB,IAAI,CAAC,EAAE,OAAO,CAAC;IACtD,OAAOD,QAAQ,GAAGC,kBAAkB;EACtC;;EAEA;AACF;AACA;EACE,OAAOC,2BAA2BA,CAACF,QAAgB,EAAEG,SAAiB,EAAU;IAC9E,IAAIH,QAAQ,IAAI,CAAC,EAAE,OAAO,CAAC;IAC3B,OAAOG,SAAS,GAAGH,QAAQ;EAC7B;;EAEA;AACF;AACA;EACE,OAAOI,4BAA4BA,CAACC,OAAe,EAAEC,gBAAwB,EAAU;IACrF,IAAID,OAAO,IAAI,CAAC,IAAIC,gBAAgB,IAAI,CAAC,EAAE,OAAO,CAAC;IACnD,OAAOD,OAAO,GAAGC,gBAAgB;EACnC;;EAEA;AACF;AACA;EACE,OAAOC,yBAAyBA,CAACF,OAAe,EAAEG,mBAA2B,EAAU;IACrF,IAAIH,OAAO,IAAI,CAAC,EAAE,OAAO,CAAC;IAC1B,OAAOG,mBAAmB,GAAGH,OAAO;EACtC;;EAEA;AACF;AACA;EACE,OAAOI,aAAaA,CAACC,GAAW,EAAU;IACxC,IAAI,CAACA,GAAG,EAAE,OAAO,CAAC;IAClB,MAAMC,GAAG,GAAGC,UAAU,CAACF,GAAG,CAAC;IAC3B,OAAOG,KAAK,CAACF,GAAG,CAAC,GAAG,CAAC,GAAGA,GAAG;EAC7B;;EAEA;AACF;AACA;EACE,OAAOG,qBAAqBA,CAACJ,GAAW,EAAU;IAChD,IAAI,CAACA,GAAG,EAAE,OAAO,CAAC;IAClB,MAAMC,GAAG,GAAGC,UAAU,CAACF,GAAG,CAAC;IAC3B,OAAOG,KAAK,CAACF,GAAG,CAAC,GAAG,CAAC,GAAGA,GAAG;EAC7B;;EAEA;AACF;AACA;EACE,OAAOI,wBAAwBA,CAACL,GAAW,EAAU;IACnD,IAAI,CAACA,GAAG,EAAE,OAAO,CAAC;IAClB,MAAMC,GAAG,GAAGC,UAAU,CAACF,GAAG,CAAC;IAC3B,OAAOG,KAAK,CAACF,GAAG,CAAC,GAAG,CAAC,GAAGA,GAAG;EAC7B;;EAEA;AACF;AACA;EACE,OAAOK,sBAAsBA,CAC3BC,IAAoB,EACpBC,WAAmB,EACnBb,OAAe,EACQ;IACvB,IAAIa,WAAW,KAAK,MAAM,EAAE;MAC1B;MACA,OAAO;QACLV,mBAAmB,EAAE,IAAI,CAACJ,4BAA4B,CAACC,OAAO,EAAEY,IAAI,CAACX,gBAAgB;MACvF,CAAC;IACH,CAAC,MAAM,IAAIY,WAAW,KAAK,QAAQ,EAAE;MACnC;MACA,OAAO;QACLZ,gBAAgB,EAAE,IAAI,CAACC,yBAAyB,CAACF,OAAO,EAAEY,IAAI,CAACT,mBAAmB;MACpF,CAAC;IACH;IACA,OAAO,CAAC,CAAC;EACX;;EAEA;AACF;AACA;EACE,OAAOW,sBAAsBA,CAC3BnB,QAAgB,EAChBoB,QAA4C,EAC5CC,cAAsB,EACtBC,uBAA+B,EACoB;IACnD,IAAIF,QAAQ,KAAK,WAAW,EAAE;MAC5B,MAAMnB,kBAAkB,GAAG,IAAI,CAACC,2BAA2B,CAACF,QAAQ,EAAEqB,cAAc,CAAC;MACrF,OAAO;QACLlB,SAAS,EAAEkB,cAAc;QACzBpB;MACF,CAAC;IACH,CAAC,MAAM;MACL,MAAME,SAAS,GAAG,IAAI,CAACJ,kBAAkB,CAACC,QAAQ,EAAEsB,uBAAuB,CAAC;MAC5E,OAAO;QACLnB,SAAS;QACTF,kBAAkB,EAAEqB;MACtB,CAAC;IACH;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}