{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nexport const useNotifications = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const addNotification = useCallback((type, title, message, duration = 5000) => {\n    const id = Date.now().toString();\n    const newNotification = {\n      id,\n      type,\n      title,\n      message,\n      duration\n    };\n    setNotifications(prev => [...prev, newNotification]);\n\n    // Auto-remove notification after duration\n    if (duration > 0) {\n      setTimeout(() => {\n        removeNotification(id);\n      }, duration);\n    }\n    return id;\n  }, []);\n  const removeNotification = useCallback(id => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  }, []);\n  const clearAllNotifications = useCallback(() => {\n    setNotifications([]);\n  }, []);\n\n  // Convenience methods\n  const showSuccess = useCallback((title, message) => {\n    return addNotification('success', title, message, 4000);\n  }, [addNotification]);\n  const showError = useCallback((title, message) => {\n    return addNotification('error', title, message, 6000); // Longer duration for errors\n  }, [addNotification]);\n  const showWarning = useCallback((title, message) => {\n    return addNotification('warning', title, message, 5000);\n  }, [addNotification]);\n  const showInfo = useCallback((title, message) => {\n    return addNotification('info', title, message, 4000);\n  }, [addNotification]);\n  return {\n    notifications,\n    addNotification,\n    removeNotification,\n    clearAllNotifications,\n    showSuccess,\n    showError,\n    showWarning,\n    showInfo\n  };\n};\n_s(useNotifications, \"yePIS9b3g5uIS63gQcESYJIo1ys=\");","map":{"version":3,"names":["useState","useCallback","useNotifications","_s","notifications","setNotifications","addNotification","type","title","message","duration","id","Date","now","toString","newNotification","prev","setTimeout","removeNotification","filter","notification","clearAllNotifications","showSuccess","showError","showWarning","showInfo"],"sources":["C:/Users/chemseddine/Desktop/future_sur_taux/frontend/src/components/forms/FutureCreationForm/hooks/useNotifications.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { NotificationType } from '../common/NotificationToast';\r\n\r\ninterface Notification {\r\n  id: string;\r\n  type: NotificationType;\r\n  title: string;\r\n  message?: string;\r\n  duration?: number;\r\n}\r\n\r\nexport const useNotifications = () => {\r\n  const [notifications, setNotifications] = useState<Notification[]>([]);\r\n\r\n  const addNotification = useCallback((\r\n    type: NotificationType,\r\n    title: string,\r\n    message?: string,\r\n    duration: number = 5000\r\n  ) => {\r\n    const id = Date.now().toString();\r\n    const newNotification: Notification = {\r\n      id,\r\n      type,\r\n      title,\r\n      message,\r\n      duration,\r\n    };\r\n\r\n    setNotifications(prev => [...prev, newNotification]);\r\n\r\n    // Auto-remove notification after duration\r\n    if (duration > 0) {\r\n      setTimeout(() => {\r\n        removeNotification(id);\r\n      }, duration);\r\n    }\r\n\r\n    return id;\r\n  }, []);\r\n\r\n  const removeNotification = useCallback((id: string) => {\r\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\r\n  }, []);\r\n\r\n  const clearAllNotifications = useCallback(() => {\r\n    setNotifications([]);\r\n  }, []);\r\n\r\n  // Convenience methods\r\n  const showSuccess = useCallback((title: string, message?: string) => {\r\n    return addNotification('success', title, message, 4000);\r\n  }, [addNotification]);\r\n\r\n  const showError = useCallback((title: string, message?: string) => {\r\n    return addNotification('error', title, message, 6000); // Longer duration for errors\r\n  }, [addNotification]);\r\n\r\n  const showWarning = useCallback((title: string, message?: string) => {\r\n    return addNotification('warning', title, message, 5000);\r\n  }, [addNotification]);\r\n\r\n  const showInfo = useCallback((title: string, message?: string) => {\r\n    return addNotification('info', title, message, 4000);\r\n  }, [addNotification]);\r\n\r\n  return {\r\n    notifications,\r\n    addNotification,\r\n    removeNotification,\r\n    clearAllNotifications,\r\n    showSuccess,\r\n    showError,\r\n    showWarning,\r\n    showInfo,\r\n  };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAW7C,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGL,QAAQ,CAAiB,EAAE,CAAC;EAEtE,MAAMM,eAAe,GAAGL,WAAW,CAAC,CAClCM,IAAsB,EACtBC,KAAa,EACbC,OAAgB,EAChBC,QAAgB,GAAG,IAAI,KACpB;IACH,MAAMC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IAChC,MAAMC,eAA6B,GAAG;MACpCJ,EAAE;MACFJ,IAAI;MACJC,KAAK;MACLC,OAAO;MACPC;IACF,CAAC;IAEDL,gBAAgB,CAACW,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,eAAe,CAAC,CAAC;;IAEpD;IACA,IAAIL,QAAQ,GAAG,CAAC,EAAE;MAChBO,UAAU,CAAC,MAAM;QACfC,kBAAkB,CAACP,EAAE,CAAC;MACxB,CAAC,EAAED,QAAQ,CAAC;IACd;IAEA,OAAOC,EAAE;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,kBAAkB,GAAGjB,WAAW,CAAEU,EAAU,IAAK;IACrDN,gBAAgB,CAACW,IAAI,IAAIA,IAAI,CAACG,MAAM,CAACC,YAAY,IAAIA,YAAY,CAACT,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC/E,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMU,qBAAqB,GAAGpB,WAAW,CAAC,MAAM;IAC9CI,gBAAgB,CAAC,EAAE,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMiB,WAAW,GAAGrB,WAAW,CAAC,CAACO,KAAa,EAAEC,OAAgB,KAAK;IACnE,OAAOH,eAAe,CAAC,SAAS,EAAEE,KAAK,EAAEC,OAAO,EAAE,IAAI,CAAC;EACzD,CAAC,EAAE,CAACH,eAAe,CAAC,CAAC;EAErB,MAAMiB,SAAS,GAAGtB,WAAW,CAAC,CAACO,KAAa,EAAEC,OAAgB,KAAK;IACjE,OAAOH,eAAe,CAAC,OAAO,EAAEE,KAAK,EAAEC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;EACzD,CAAC,EAAE,CAACH,eAAe,CAAC,CAAC;EAErB,MAAMkB,WAAW,GAAGvB,WAAW,CAAC,CAACO,KAAa,EAAEC,OAAgB,KAAK;IACnE,OAAOH,eAAe,CAAC,SAAS,EAAEE,KAAK,EAAEC,OAAO,EAAE,IAAI,CAAC;EACzD,CAAC,EAAE,CAACH,eAAe,CAAC,CAAC;EAErB,MAAMmB,QAAQ,GAAGxB,WAAW,CAAC,CAACO,KAAa,EAAEC,OAAgB,KAAK;IAChE,OAAOH,eAAe,CAAC,MAAM,EAAEE,KAAK,EAAEC,OAAO,EAAE,IAAI,CAAC;EACtD,CAAC,EAAE,CAACH,eAAe,CAAC,CAAC;EAErB,OAAO;IACLF,aAAa;IACbE,eAAe;IACfY,kBAAkB;IAClBG,qBAAqB;IACrBC,WAAW;IACXC,SAAS;IACTC,WAAW;IACXC;EACF,CAAC;AACH,CAAC;AAACtB,EAAA,CAjEWD,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}