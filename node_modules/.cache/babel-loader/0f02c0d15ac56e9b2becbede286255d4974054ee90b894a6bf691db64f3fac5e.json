{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst FutureCreationForm = () => {\n  _s();\n  const [form, setForm] = useState({\n    symbol: '',\n    description: '',\n    isin: '',\n    expirationCode: '',\n    parentTicker: '',\n    fullName: '',\n    segment: '',\n    maturityDate: '',\n    firstTradingDate: '',\n    lastTraadingDate: '',\n    initialMarginAmount: 0,\n    percentageMargin: 0,\n    lotSize: 0,\n    contractMultiplier: 0,\n    tradingCurrency: '',\n    underlyingType: '',\n    underlyingId: 0,\n    settlementMethod: '',\n    instrumentStatus: false,\n    tickSize: 0,\n    tickValue: 0,\n    depositType: ''\n  });\n  const [settlementMethods, setSettlementMethods] = useState([]);\n  const [depositTypes, setDepositTypes] = useState([]);\n  const [underlyingTypes, setUnderlyingTypes] = useState([]);\n  const [underlyingAssets, setUnderlyingAssets] = useState([]);\n  const [editMode, setEditMode] = useState('tickValue');\n  const [tickSizeStr, setTickSizeStr] = useState('');\n  const [tickValueInput, setTickValueInput] = useState(0);\n  const [contractMultiplierInput, setContractMultiplierInput] = useState(0);\n  useEffect(() => {\n    async function fetchEnums() {\n      const [settlementRes, depositRes, typeRes] = await Promise.all([axios.get('/api/enums/settlement-methods'), axios.get('/api/enums/deposit-types'), axios.get('/api/underlyings/types')]);\n      setSettlementMethods(settlementRes.data);\n      setDepositTypes(depositRes.data);\n      setUnderlyingTypes(typeRes.data);\n    }\n    fetchEnums();\n  }, []);\n  useEffect(() => {\n    if (form.underlyingType) {\n      axios.get(`/api/underlying-assets?type=${form.underlyingType}`).then(res => setUnderlyingAssets(res.data)).catch(() => setUnderlyingAssets([]));\n      setForm(prev => ({\n        ...prev,\n        underlyingId: 0\n      }));\n    } else {\n      setUnderlyingAssets([]);\n      setForm(prev => ({\n        ...prev,\n        underlyingId: 0\n      }));\n    }\n  }, [form.underlyingType]);\n  useEffect(() => {\n    setTickSizeStr(form.tickSize > 0 ? form.tickSize.toString() : '');\n  }, [form.tickSize]);\n  useEffect(() => {\n    const tickSize = parseTickSize(tickSizeStr);\n    if (editMode === 'tickValue') {\n      const contractMultiplierCalc = tickSize > 0 ? tickValueInput / tickSize : 0;\n\n      // Met à jour form seulement si les valeurs ont changé\n      setForm(prev => {\n        if (prev.tickSize !== tickSize || prev.tickValue !== tickValueInput || prev.contractMultiplier !== contractMultiplierCalc) {\n          return {\n            ...prev,\n            tickSize,\n            tickValue: tickValueInput,\n            contractMultiplier: contractMultiplierCalc\n          };\n        }\n        return prev;\n      });\n\n      // Pour l'affichage local, on peut mettre à jour contractMultiplierInput pour rester cohérent\n      setContractMultiplierInput(contractMultiplierCalc);\n    } else {\n      const tickValueCalc = contractMultiplierInput * tickSize;\n      setForm(prev => {\n        if (prev.tickSize !== tickSize || prev.contractMultiplier !== contractMultiplierInput || prev.tickValue !== tickValueCalc) {\n          return {\n            ...prev,\n            tickSize,\n            contractMultiplier: contractMultiplierInput,\n            tickValue: tickValueCalc\n          };\n        }\n        return prev;\n      });\n\n      // Mettre à jour tickValueInput local pour affichage\n      setTickValueInput(tickValueCalc);\n    }\n  }, [tickSizeStr, editMode, tickValueInput, contractMultiplierInput]);\n  const parseTickSize = str => {\n    if (!str) return 0;\n    const val = parseFloat(str);\n    return isNaN(val) ? 0 : val;\n  };\n  const isRate = form.depositType === 'RATE';\n  const isAmount = form.depositType === 'AMOUNT';\n  const handleChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    setForm(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n  const handlePercentageMarginChange = e => {\n    const val = parseFloat(e.target.value);\n    setForm(prev => ({\n      ...prev,\n      percentageMargin: val,\n      initialMarginAmount: prev.lotSize * val\n    }));\n  };\n  const handleInitialMarginAmountChange = e => {\n    const val = parseFloat(e.target.value);\n    setForm(prev => ({\n      ...prev,\n      initialMarginAmount: val,\n      percentageMargin: prev.lotSize > 0 ? val / prev.lotSize : 0\n    }));\n  };\n  const handleTickValueChange = e => {\n    const val = parseFloat(e.target.value);\n    setTickValueInput(val);\n  };\n  const handleContractMultiplierChange = e => {\n    const val = parseFloat(e.target.value);\n    setContractMultiplierInput(val);\n  };\n  const handleTickSizeChange = e => {\n    setTickSizeStr(e.target.value);\n  };\n  useEffect(() => {\n    setForm(prev => {\n      if (isRate) {\n        return {\n          ...prev,\n          initialMarginAmount: prev.lotSize * prev.percentageMargin\n        };\n      } else if (isAmount) {\n        return {\n          ...prev,\n          percentageMargin: prev.lotSize > 0 ? prev.initialMarginAmount / prev.lotSize : 0\n        };\n      }\n      return prev;\n    });\n  }, [form.lotSize, form.depositType]);\n  const handleModeChange = mode => {\n    setEditMode(mode);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      await axios.post('/api/futures', form);\n      alert('Future créé avec succès');\n    } catch (err) {\n      alert('Erreur lors de la création');\n      console.error(err);\n    }\n  };\n};\n_s(FutureCreationForm, \"uS0GYdNq2dFi6dN6cS79zPxewMI=\");\n_c = FutureCreationForm;\nexport default FutureCreationForm;\nvar _c;\n$RefreshReg$(_c, \"FutureCreationForm\");","map":{"version":3,"names":["useState","useEffect","axios","FutureCreationForm","_s","form","setForm","symbol","description","isin","expirationCode","parentTicker","fullName","segment","maturityDate","firstTradingDate","lastTraadingDate","initialMarginAmount","percentageMargin","lotSize","contractMultiplier","tradingCurrency","underlyingType","underlyingId","settlementMethod","instrumentStatus","tickSize","tickValue","depositType","settlementMethods","setSettlementMethods","depositTypes","setDepositTypes","underlyingTypes","setUnderlyingTypes","underlyingAssets","setUnderlyingAssets","editMode","setEditMode","tickSizeStr","setTickSizeStr","tickValueInput","setTickValueInput","contractMultiplierInput","setContractMultiplierInput","fetchEnums","settlementRes","depositRes","typeRes","Promise","all","get","data","then","res","catch","prev","toString","parseTickSize","contractMultiplierCalc","tickValueCalc","str","val","parseFloat","isNaN","isRate","isAmount","handleChange","e","name","value","type","checked","target","handlePercentageMarginChange","handleInitialMarginAmountChange","handleTickValueChange","handleContractMultiplierChange","handleTickSizeChange","handleModeChange","mode","handleSubmit","preventDefault","post","alert","err","console","error","_c","$RefreshReg$"],"sources":["C:/Users/chemseddine/Desktop/future_sur_taux/frontend/src/components/FutureCreationForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\ninterface FutureCreationDTO {\r\n  symbol: string;\r\n  description: string;\r\n  isin: string;\r\n  expirationCode: string;\r\n  parentTicker: string;\r\n  fullName: string;\r\n  segment: string;\r\n  maturityDate: string;\r\n  firstTradingDate: string;\r\n  lastTraadingDate: string;\r\n  initialMarginAmount: number;\r\n  percentageMargin: number;\r\n  lotSize: number;\r\n  contractMultiplier: number;\r\n  tradingCurrency: string;\r\n  underlyingType: string;\r\n  underlyingId: number;\r\n  settlementMethod: string;\r\n  instrumentStatus: boolean;\r\n  tickSize: number;\r\n  tickValue: number;\r\n  depositType: string;\r\n}\r\n\r\nconst FutureCreationForm: React.FC = () => {\r\n  const [form, setForm] = useState<FutureCreationDTO>({\r\n    symbol: '',\r\n    description: '',\r\n    isin: '',\r\n    expirationCode: '',\r\n    parentTicker: '',\r\n    fullName: '',\r\n    segment: '',\r\n    maturityDate: '',\r\n    firstTradingDate: '',\r\n    lastTraadingDate: '',\r\n    initialMarginAmount: 0,\r\n    percentageMargin: 0,\r\n    lotSize: 0,\r\n    contractMultiplier: 0,\r\n    tradingCurrency: '',\r\n    underlyingType: '',\r\n    underlyingId: 0,\r\n    settlementMethod: '',\r\n    instrumentStatus: false,\r\n    tickSize: 0,\r\n    tickValue: 0,\r\n    depositType: '',\r\n  });\r\n\r\n  const [settlementMethods, setSettlementMethods] = useState<string[]>([]);\r\n  const [depositTypes, setDepositTypes] = useState<string[]>([]);\r\n  const [underlyingTypes, setUnderlyingTypes] = useState<string[]>([]);\r\n  const [underlyingAssets, setUnderlyingAssets] = useState<{ id: number; identifier: string }[]>([]);\r\n\r\n  const [editMode, setEditMode] = useState<'tickValue' | 'contractMultiplier'>('tickValue');\r\n  const [tickSizeStr, setTickSizeStr] = useState('');\r\n  const [tickValueInput, setTickValueInput] = useState(0);\r\n  const [contractMultiplierInput, setContractMultiplierInput] = useState(0);\r\n\r\n  useEffect(() => {\r\n    async function fetchEnums() {\r\n      const [settlementRes, depositRes, typeRes] = await Promise.all([\r\n        axios.get<string[]>('/api/enums/settlement-methods'),\r\n        axios.get<string[]>('/api/enums/deposit-types'),\r\n        axios.get<string[]>('/api/underlyings/types'),\r\n      ]);\r\n      setSettlementMethods(settlementRes.data);\r\n      setDepositTypes(depositRes.data);\r\n      setUnderlyingTypes(typeRes.data);\r\n    }\r\n    fetchEnums();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (form.underlyingType) {\r\n      axios.get<{ id: number; identifier: string }[]>(`/api/underlying-assets?type=${form.underlyingType}`)\r\n        .then(res => setUnderlyingAssets(res.data))\r\n        .catch(() => setUnderlyingAssets([]));\r\n      setForm(prev => ({ ...prev, underlyingId: 0 }));\r\n    } else {\r\n      setUnderlyingAssets([]);\r\n      setForm(prev => ({ ...prev, underlyingId: 0 }));\r\n    }\r\n  }, [form.underlyingType]);\r\n\r\n  useEffect(() => {\r\n    setTickSizeStr(form.tickSize > 0 ? form.tickSize.toString() : '');\r\n  }, [form.tickSize]);\r\n\r\nuseEffect(() => {\r\n  const tickSize = parseTickSize(tickSizeStr);\r\n  if (editMode === 'tickValue') {\r\n    const contractMultiplierCalc = tickSize > 0 ? tickValueInput / tickSize : 0;\r\n\r\n    // Met à jour form seulement si les valeurs ont changé\r\n    setForm(prev => {\r\n      if (\r\n        prev.tickSize !== tickSize ||\r\n        prev.tickValue !== tickValueInput ||\r\n        prev.contractMultiplier !== contractMultiplierCalc\r\n      ) {\r\n        return {\r\n          ...prev,\r\n          tickSize,\r\n          tickValue: tickValueInput,\r\n          contractMultiplier: contractMultiplierCalc,\r\n        };\r\n      }\r\n      return prev;\r\n    });\r\n\r\n    // Pour l'affichage local, on peut mettre à jour contractMultiplierInput pour rester cohérent\r\n    setContractMultiplierInput(contractMultiplierCalc);\r\n\r\n  } else {\r\n    const tickValueCalc = contractMultiplierInput * tickSize;\r\n\r\n    setForm(prev => {\r\n      if (\r\n        prev.tickSize !== tickSize ||\r\n        prev.contractMultiplier !== contractMultiplierInput ||\r\n        prev.tickValue !== tickValueCalc\r\n      ) {\r\n        return {\r\n          ...prev,\r\n          tickSize,\r\n          contractMultiplier: contractMultiplierInput,\r\n          tickValue: tickValueCalc,\r\n        };\r\n      }\r\n      return prev;\r\n    });\r\n\r\n    // Mettre à jour tickValueInput local pour affichage\r\n    setTickValueInput(tickValueCalc);\r\n  }\r\n}, [tickSizeStr, editMode, tickValueInput, contractMultiplierInput]);\r\n\r\n\r\n  const parseTickSize = (str: string): number => {\r\n    if (!str) return 0;\r\n    const val = parseFloat(str);\r\n    return isNaN(val) ? 0 : val;\r\n  };\r\n\r\n  const isRate = form.depositType === 'RATE';\r\n  const isAmount = form.depositType === 'AMOUNT';\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setForm(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : value }));\r\n  };\r\n\r\n  const handlePercentageMarginChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const val = parseFloat(e.target.value);\r\n    setForm(prev => ({ ...prev, percentageMargin: val, initialMarginAmount: prev.lotSize * val }));\r\n  };\r\n\r\n  const handleInitialMarginAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const val = parseFloat(e.target.value);\r\n    setForm(prev => ({ ...prev, initialMarginAmount: val, percentageMargin: prev.lotSize > 0 ? val / prev.lotSize : 0 }));\r\n  };\r\n\r\n  const handleTickValueChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const val = parseFloat(e.target.value);\r\n    setTickValueInput(val);\r\n  };\r\n\r\n  const handleContractMultiplierChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const val = parseFloat(e.target.value);\r\n    setContractMultiplierInput(val);\r\n  };\r\n\r\n  const handleTickSizeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTickSizeStr(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setForm(prev => {\r\n      if (isRate) {\r\n        return { ...prev, initialMarginAmount: prev.lotSize * prev.percentageMargin };\r\n      } else if (isAmount) {\r\n        return { ...prev, percentageMargin: prev.lotSize > 0 ? prev.initialMarginAmount / prev.lotSize : 0 };\r\n      }\r\n      return prev;\r\n    });\r\n  }, [form.lotSize, form.depositType]);\r\n\r\n  const handleModeChange = (mode: 'tickValue' | 'contractMultiplier') => {\r\n    setEditMode(mode);\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post('/api/futures', form);\r\n      alert('Future créé avec succès');\r\n    } catch (err) {\r\n      alert('Erreur lors de la création');\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  \r\n};\r\n\r\nexport default FutureCreationForm;\r\n"],"mappings":";AAAA,SAAgBA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AA2BzB,MAAMC,kBAA4B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAoB;IAClDO,MAAM,EAAE,EAAE;IACVC,WAAW,EAAE,EAAE;IACfC,IAAI,EAAE,EAAE;IACRC,cAAc,EAAE,EAAE;IAClBC,YAAY,EAAE,EAAE;IAChBC,QAAQ,EAAE,EAAE;IACZC,OAAO,EAAE,EAAE;IACXC,YAAY,EAAE,EAAE;IAChBC,gBAAgB,EAAE,EAAE;IACpBC,gBAAgB,EAAE,EAAE;IACpBC,mBAAmB,EAAE,CAAC;IACtBC,gBAAgB,EAAE,CAAC;IACnBC,OAAO,EAAE,CAAC;IACVC,kBAAkB,EAAE,CAAC;IACrBC,eAAe,EAAE,EAAE;IACnBC,cAAc,EAAE,EAAE;IAClBC,YAAY,EAAE,CAAC;IACfC,gBAAgB,EAAE,EAAE;IACpBC,gBAAgB,EAAE,KAAK;IACvBC,QAAQ,EAAE,CAAC;IACXC,SAAS,EAAE,CAAC;IACZC,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG9B,QAAQ,CAAW,EAAE,CAAC;EACxE,MAAM,CAAC+B,YAAY,EAAEC,eAAe,CAAC,GAAGhC,QAAQ,CAAW,EAAE,CAAC;EAC9D,MAAM,CAACiC,eAAe,EAAEC,kBAAkB,CAAC,GAAGlC,QAAQ,CAAW,EAAE,CAAC;EACpE,MAAM,CAACmC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGpC,QAAQ,CAAuC,EAAE,CAAC;EAElG,MAAM,CAACqC,QAAQ,EAAEC,WAAW,CAAC,GAAGtC,QAAQ,CAAqC,WAAW,CAAC;EACzF,MAAM,CAACuC,WAAW,EAAEC,cAAc,CAAC,GAAGxC,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACyC,cAAc,EAAEC,iBAAiB,CAAC,GAAG1C,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAAC2C,uBAAuB,EAAEC,0BAA0B,CAAC,GAAG5C,QAAQ,CAAC,CAAC,CAAC;EAEzEC,SAAS,CAAC,MAAM;IACd,eAAe4C,UAAUA,CAAA,EAAG;MAC1B,MAAM,CAACC,aAAa,EAAEC,UAAU,EAAEC,OAAO,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC7DhD,KAAK,CAACiD,GAAG,CAAW,+BAA+B,CAAC,EACpDjD,KAAK,CAACiD,GAAG,CAAW,0BAA0B,CAAC,EAC/CjD,KAAK,CAACiD,GAAG,CAAW,wBAAwB,CAAC,CAC9C,CAAC;MACFrB,oBAAoB,CAACgB,aAAa,CAACM,IAAI,CAAC;MACxCpB,eAAe,CAACe,UAAU,CAACK,IAAI,CAAC;MAChClB,kBAAkB,CAACc,OAAO,CAACI,IAAI,CAAC;IAClC;IACAP,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN5C,SAAS,CAAC,MAAM;IACd,IAAII,IAAI,CAACiB,cAAc,EAAE;MACvBpB,KAAK,CAACiD,GAAG,CAAuC,+BAA+B9C,IAAI,CAACiB,cAAc,EAAE,CAAC,CAClG+B,IAAI,CAACC,GAAG,IAAIlB,mBAAmB,CAACkB,GAAG,CAACF,IAAI,CAAC,CAAC,CAC1CG,KAAK,CAAC,MAAMnB,mBAAmB,CAAC,EAAE,CAAC,CAAC;MACvC9B,OAAO,CAACkD,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAEjC,YAAY,EAAE;MAAE,CAAC,CAAC,CAAC;IACjD,CAAC,MAAM;MACLa,mBAAmB,CAAC,EAAE,CAAC;MACvB9B,OAAO,CAACkD,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAEjC,YAAY,EAAE;MAAE,CAAC,CAAC,CAAC;IACjD;EACF,CAAC,EAAE,CAAClB,IAAI,CAACiB,cAAc,CAAC,CAAC;EAEzBrB,SAAS,CAAC,MAAM;IACduC,cAAc,CAACnC,IAAI,CAACqB,QAAQ,GAAG,CAAC,GAAGrB,IAAI,CAACqB,QAAQ,CAAC+B,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC;EACnE,CAAC,EAAE,CAACpD,IAAI,CAACqB,QAAQ,CAAC,CAAC;EAErBzB,SAAS,CAAC,MAAM;IACd,MAAMyB,QAAQ,GAAGgC,aAAa,CAACnB,WAAW,CAAC;IAC3C,IAAIF,QAAQ,KAAK,WAAW,EAAE;MAC5B,MAAMsB,sBAAsB,GAAGjC,QAAQ,GAAG,CAAC,GAAGe,cAAc,GAAGf,QAAQ,GAAG,CAAC;;MAE3E;MACApB,OAAO,CAACkD,IAAI,IAAI;QACd,IACEA,IAAI,CAAC9B,QAAQ,KAAKA,QAAQ,IAC1B8B,IAAI,CAAC7B,SAAS,KAAKc,cAAc,IACjCe,IAAI,CAACpC,kBAAkB,KAAKuC,sBAAsB,EAClD;UACA,OAAO;YACL,GAAGH,IAAI;YACP9B,QAAQ;YACRC,SAAS,EAAEc,cAAc;YACzBrB,kBAAkB,EAAEuC;UACtB,CAAC;QACH;QACA,OAAOH,IAAI;MACb,CAAC,CAAC;;MAEF;MACAZ,0BAA0B,CAACe,sBAAsB,CAAC;IAEpD,CAAC,MAAM;MACL,MAAMC,aAAa,GAAGjB,uBAAuB,GAAGjB,QAAQ;MAExDpB,OAAO,CAACkD,IAAI,IAAI;QACd,IACEA,IAAI,CAAC9B,QAAQ,KAAKA,QAAQ,IAC1B8B,IAAI,CAACpC,kBAAkB,KAAKuB,uBAAuB,IACnDa,IAAI,CAAC7B,SAAS,KAAKiC,aAAa,EAChC;UACA,OAAO;YACL,GAAGJ,IAAI;YACP9B,QAAQ;YACRN,kBAAkB,EAAEuB,uBAAuB;YAC3ChB,SAAS,EAAEiC;UACb,CAAC;QACH;QACA,OAAOJ,IAAI;MACb,CAAC,CAAC;;MAEF;MACAd,iBAAiB,CAACkB,aAAa,CAAC;IAClC;EACF,CAAC,EAAE,CAACrB,WAAW,EAAEF,QAAQ,EAAEI,cAAc,EAAEE,uBAAuB,CAAC,CAAC;EAGlE,MAAMe,aAAa,GAAIG,GAAW,IAAa;IAC7C,IAAI,CAACA,GAAG,EAAE,OAAO,CAAC;IAClB,MAAMC,GAAG,GAAGC,UAAU,CAACF,GAAG,CAAC;IAC3B,OAAOG,KAAK,CAACF,GAAG,CAAC,GAAG,CAAC,GAAGA,GAAG;EAC7B,CAAC;EAED,MAAMG,MAAM,GAAG5D,IAAI,CAACuB,WAAW,KAAK,MAAM;EAC1C,MAAMsC,QAAQ,GAAG7D,IAAI,CAACuB,WAAW,KAAK,QAAQ;EAE9C,MAAMuC,YAAY,GAAIC,CAA0D,IAAK;IACnF,MAAM;MAAEC,IAAI;MAAEC,KAAK;MAAEC,IAAI;MAAEC;IAAQ,CAAC,GAAGJ,CAAC,CAACK,MAAM;IAC/CnE,OAAO,CAACkD,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,CAACa,IAAI,GAAGE,IAAI,KAAK,UAAU,GAAGC,OAAO,GAAGF;IAAM,CAAC,CAAC,CAAC;EAC/E,CAAC;EAED,MAAMI,4BAA4B,GAAIN,CAAsC,IAAK;IAC/E,MAAMN,GAAG,GAAGC,UAAU,CAACK,CAAC,CAACK,MAAM,CAACH,KAAK,CAAC;IACtChE,OAAO,CAACkD,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEtC,gBAAgB,EAAE4C,GAAG;MAAE7C,mBAAmB,EAAEuC,IAAI,CAACrC,OAAO,GAAG2C;IAAI,CAAC,CAAC,CAAC;EAChG,CAAC;EAED,MAAMa,+BAA+B,GAAIP,CAAsC,IAAK;IAClF,MAAMN,GAAG,GAAGC,UAAU,CAACK,CAAC,CAACK,MAAM,CAACH,KAAK,CAAC;IACtChE,OAAO,CAACkD,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEvC,mBAAmB,EAAE6C,GAAG;MAAE5C,gBAAgB,EAAEsC,IAAI,CAACrC,OAAO,GAAG,CAAC,GAAG2C,GAAG,GAAGN,IAAI,CAACrC,OAAO,GAAG;IAAE,CAAC,CAAC,CAAC;EACvH,CAAC;EAED,MAAMyD,qBAAqB,GAAIR,CAAsC,IAAK;IACxE,MAAMN,GAAG,GAAGC,UAAU,CAACK,CAAC,CAACK,MAAM,CAACH,KAAK,CAAC;IACtC5B,iBAAiB,CAACoB,GAAG,CAAC;EACxB,CAAC;EAED,MAAMe,8BAA8B,GAAIT,CAAsC,IAAK;IACjF,MAAMN,GAAG,GAAGC,UAAU,CAACK,CAAC,CAACK,MAAM,CAACH,KAAK,CAAC;IACtC1B,0BAA0B,CAACkB,GAAG,CAAC;EACjC,CAAC;EAED,MAAMgB,oBAAoB,GAAIV,CAAsC,IAAK;IACvE5B,cAAc,CAAC4B,CAAC,CAACK,MAAM,CAACH,KAAK,CAAC;EAChC,CAAC;EAEDrE,SAAS,CAAC,MAAM;IACdK,OAAO,CAACkD,IAAI,IAAI;MACd,IAAIS,MAAM,EAAE;QACV,OAAO;UAAE,GAAGT,IAAI;UAAEvC,mBAAmB,EAAEuC,IAAI,CAACrC,OAAO,GAAGqC,IAAI,CAACtC;QAAiB,CAAC;MAC/E,CAAC,MAAM,IAAIgD,QAAQ,EAAE;QACnB,OAAO;UAAE,GAAGV,IAAI;UAAEtC,gBAAgB,EAAEsC,IAAI,CAACrC,OAAO,GAAG,CAAC,GAAGqC,IAAI,CAACvC,mBAAmB,GAAGuC,IAAI,CAACrC,OAAO,GAAG;QAAE,CAAC;MACtG;MACA,OAAOqC,IAAI;IACb,CAAC,CAAC;EACJ,CAAC,EAAE,CAACnD,IAAI,CAACc,OAAO,EAAEd,IAAI,CAACuB,WAAW,CAAC,CAAC;EAEpC,MAAMmD,gBAAgB,GAAIC,IAAwC,IAAK;IACrE1C,WAAW,CAAC0C,IAAI,CAAC;EACnB,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOb,CAAkB,IAAK;IACjDA,CAAC,CAACc,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAMhF,KAAK,CAACiF,IAAI,CAAC,cAAc,EAAE9E,IAAI,CAAC;MACtC+E,KAAK,CAAC,yBAAyB,CAAC;IAClC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZD,KAAK,CAAC,4BAA4B,CAAC;MACnCE,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IACpB;EACF,CAAC;AAGH,CAAC;AAACjF,EAAA,CArLID,kBAA4B;AAAAqF,EAAA,GAA5BrF,kBAA4B;AAuLlC,eAAeA,kBAAkB;AAAC,IAAAqF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}