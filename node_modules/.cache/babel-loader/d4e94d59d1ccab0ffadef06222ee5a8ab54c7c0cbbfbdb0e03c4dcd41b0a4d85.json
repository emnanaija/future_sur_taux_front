{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chemseddine\\\\Desktop\\\\future_sur_taux\\\\frontend\\\\src\\\\components\\\\forms\\\\FutureCreationForm\\\\common\\\\FormStepper.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FormStepper = ({\n  sections,\n  currentStep,\n  completedSteps,\n  onStepClick,\n  stepValidations,\n  getStepValidation\n}) => {\n  const isStepClickable = stepIndex => {\n    // Can click on completed steps or the next available step\n    return completedSteps.has(stepIndex) || stepIndex === currentStep;\n  };\n  const getStepStatus = stepIndex => {\n    if (completedSteps.has(stepIndex)) return 'completed';\n    if (stepIndex === currentStep) return 'current';\n\n    // Check if step is incomplete (has validation errors)\n    if (getStepValidation) {\n      const validation = getStepValidation(stepIndex);\n      if (!validation.canProceed) return 'incomplete';\n    }\n    return 'upcoming';\n  };\n  const getStepIcon = (stepIndex, status) => {\n    if (status === 'completed') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-5 h-5 rounded-full bg-teal-600 text-white flex items-center justify-center text-xs\",\n        children: \"\\u2713\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this);\n    }\n    if (status === 'current') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-5 h-5 rounded-full bg-teal-100 text-teal-600 border border-teal-600 flex items-center justify-center text-xs\",\n        children: stepIndex + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this);\n    }\n    if (status === 'incomplete') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-5 h-5 rounded-full bg-red-100 text-red-600 border border-red-600 flex items-center justify-center text-xs\",\n        children: \"!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-5 h-5 rounded-full bg-gray-100 text-gray-400 border border-gray-300 flex items-center justify-center text-xs\",\n      children: stepIndex + 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  };\n  const getStepTextColor = status => {\n    switch (status) {\n      case 'completed':\n        return 'text-teal-600';\n      case 'current':\n        return 'text-teal-600';\n      case 'incomplete':\n        return 'text-red-600';\n      case 'upcoming':\n        return 'text-gray-400';\n    }\n  };\n  const getStepTooltip = (stepIndex, status) => {\n    if (status === 'incomplete' && getStepValidation) {\n      const validation = getStepValidation(stepIndex);\n      if (validation.missingFields.length > 0) {\n        return `Champs requis manquants: ${validation.missingFields.join(', ')}`;\n      }\n    }\n    switch (status) {\n      case 'completed':\n        return 'Étape terminée';\n      case 'current':\n        return 'Étape en cours';\n      case 'incomplete':\n        return 'Étape incomplète - champs requis manquants';\n      case 'upcoming':\n        return 'Étape à venir';\n      default:\n        return '';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mb-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-between mb-1\",\n      children: sections.map((section, index) => {\n        const status = getStepStatus(index);\n        const isClickable = isStepClickable(index);\n        const tooltip = getStepTooltip(index, status);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex items-center ${getStepTextColor(status)} ${isClickable && onStepClick ? 'cursor-pointer hover:opacity-80' : 'cursor-not-allowed opacity-60'} transition-all duration-200`,\n          onClick: () => isClickable && (onStepClick === null || onStepClick === void 0 ? void 0 : onStepClick(index)),\n          title: tooltip,\n          children: [getStepIcon(index, status), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"hidden sm:block text-xs font-medium ml-1\",\n            children: section.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this), index < sections.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hidden sm:block w-6 h-0.5 mx-1 bg-gray-200\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this)]\n        }, section.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), getStepValidation && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-2 text-xs text-gray-600\",\n      children: (() => {\n        const currentValidation = getStepValidation(currentStep);\n        if (!currentValidation.canProceed) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-1 text-red-600\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u26A0\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [currentValidation.missingFields.length, \" champ(s) requis manquant(s) pour continuer \\xE0 l'\\xE9tape suivante\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 17\n          }, this);\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-1 text-teal-600\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\u2713\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Cette \\xE9tape est compl\\xE8te, vous pouvez continuer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 15\n        }, this);\n      })()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_c = FormStepper;\nvar _c;\n$RefreshReg$(_c, \"FormStepper\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","FormStepper","sections","currentStep","completedSteps","onStepClick","stepValidations","getStepValidation","isStepClickable","stepIndex","has","getStepStatus","validation","canProceed","getStepIcon","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getStepTextColor","getStepTooltip","missingFields","length","join","map","section","index","isClickable","tooltip","onClick","title","id","currentValidation","_c","$RefreshReg$"],"sources":["C:/Users/chemseddine/Desktop/future_sur_taux/frontend/src/components/forms/FutureCreationForm/common/FormStepper.tsx"],"sourcesContent":["import React from 'react';\r\nimport { FormSection } from '../hooks/useFormNavigation';\r\nimport { StepValidationResult } from '../hooks/useFormNavigation';\r\n\r\ninterface FormStepperProps {\r\n  sections: FormSection[];\r\n  currentStep: number;\r\n  completedSteps: Set<number>;\r\n  onStepClick?: (stepIndex: number) => void;\r\n  stepValidations?: StepValidationResult[];\r\n  getStepValidation?: (stepIndex: number) => StepValidationResult;\r\n}\r\n\r\nexport const FormStepper: React.FC<FormStepperProps> = ({\r\n  sections,\r\n  currentStep,\r\n  completedSteps,\r\n  onStepClick,\r\n  stepValidations,\r\n  getStepValidation\r\n}) => {\r\n  const isStepClickable = (stepIndex: number): boolean => {\r\n    // Can click on completed steps or the next available step\r\n    return completedSteps.has(stepIndex) || stepIndex === currentStep;\r\n  };\r\n\r\n  const getStepStatus = (stepIndex: number): 'completed' | 'current' | 'upcoming' | 'incomplete' => {\r\n    if (completedSteps.has(stepIndex)) return 'completed';\r\n    if (stepIndex === currentStep) return 'current';\r\n    \r\n    // Check if step is incomplete (has validation errors)\r\n    if (getStepValidation) {\r\n      const validation = getStepValidation(stepIndex);\r\n      if (!validation.canProceed) return 'incomplete';\r\n    }\r\n    \r\n    return 'upcoming';\r\n  };\r\n\r\n  const getStepIcon = (stepIndex: number, status: 'completed' | 'current' | 'upcoming' | 'incomplete') => {\r\n    if (status === 'completed') {\r\n      return (\r\n        <div className=\"w-5 h-5 rounded-full bg-teal-600 text-white flex items-center justify-center text-xs\">\r\n          ✓\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    if (status === 'current') {\r\n      return (\r\n        <div className=\"w-5 h-5 rounded-full bg-teal-100 text-teal-600 border border-teal-600 flex items-center justify-center text-xs\">\r\n          {stepIndex + 1}\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    if (status === 'incomplete') {\r\n      return (\r\n        <div className=\"w-5 h-5 rounded-full bg-red-100 text-red-600 border border-red-600 flex items-center justify-center text-xs\">\r\n          !\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    return (\r\n      <div className=\"w-5 h-5 rounded-full bg-gray-100 text-gray-400 border border-gray-300 flex items-center justify-center text-xs\">\r\n        {stepIndex + 1}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const getStepTextColor = (status: 'completed' | 'current' | 'upcoming' | 'incomplete') => {\r\n    switch (status) {\r\n      case 'completed':\r\n        return 'text-teal-600';\r\n      case 'current':\r\n        return 'text-teal-600';\r\n      case 'incomplete':\r\n        return 'text-red-600';\r\n      case 'upcoming':\r\n        return 'text-gray-400';\r\n    }\r\n  };\r\n\r\n  const getStepTooltip = (stepIndex: number, status: 'completed' | 'current' | 'upcoming' | 'incomplete') => {\r\n    if (status === 'incomplete' && getStepValidation) {\r\n      const validation = getStepValidation(stepIndex);\r\n      if (validation.missingFields.length > 0) {\r\n        return `Champs requis manquants: ${validation.missingFields.join(', ')}`;\r\n      }\r\n    }\r\n    \r\n    switch (status) {\r\n      case 'completed':\r\n        return 'Étape terminée';\r\n      case 'current':\r\n        return 'Étape en cours';\r\n      case 'incomplete':\r\n        return 'Étape incomplète - champs requis manquants';\r\n      case 'upcoming':\r\n        return 'Étape à venir';\r\n      default:\r\n        return '';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"mb-3\">\r\n      {/* Step indicators */}\r\n      <div className=\"flex items-center justify-between mb-1\">\r\n        {sections.map((section, index) => {\r\n          const status = getStepStatus(index);\r\n          const isClickable = isStepClickable(index);\r\n          const tooltip = getStepTooltip(index, status);\r\n          \r\n          return (\r\n            <div\r\n              key={section.id}\r\n              className={`flex items-center ${getStepTextColor(status)} ${\r\n                isClickable && onStepClick ? 'cursor-pointer hover:opacity-80' : 'cursor-not-allowed opacity-60'\r\n              } transition-all duration-200`}\r\n              onClick={() => isClickable && onStepClick?.(index)}\r\n              title={tooltip}\r\n            >\r\n              {getStepIcon(index, status)}\r\n              <span className=\"hidden sm:block text-xs font-medium ml-1\">\r\n                {section.title}\r\n              </span>\r\n              {index < sections.length - 1 && (\r\n                <div className=\"hidden sm:block w-6 h-0.5 mx-1 bg-gray-200\" />\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      \r\n      {/* Progress bar - SUPPRIMÉ pour une interface plus épurée */}\r\n      {/* <div className=\"relative h-1 bg-gray-200 rounded-full overflow-hidden\">\r\n        <div\r\n          className=\"absolute h-full bg-teal-600 transition-all duration-300 ease-out\"\r\n          style={{ width: `${((currentStep + 1) / sections.length) * 100}%` }}\r\n        />\r\n      </div> */}\r\n      \r\n      {/* Validation status indicator */}\r\n      {getStepValidation && (\r\n        <div className=\"mt-2 text-xs text-gray-600\">\r\n          {(() => {\r\n            const currentValidation = getStepValidation(currentStep);\r\n            if (!currentValidation.canProceed) {\r\n              return (\r\n                <div className=\"flex items-center space-x-1 text-red-600\">\r\n                  <span>⚠️</span>\r\n                  <span>\r\n                    {currentValidation.missingFields.length} champ(s) requis manquant(s) \r\n                    pour continuer à l'étape suivante\r\n                  </span>\r\n                </div>\r\n              );\r\n            }\r\n            return (\r\n              <div className=\"flex items-center space-x-1 text-teal-600\">\r\n                <span>✓</span>\r\n                <span>Cette étape est complète, vous pouvez continuer</span>\r\n              </div>\r\n            );\r\n          })()}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}