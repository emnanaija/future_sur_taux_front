{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { validateField, validateForm, validateTradingDates } from '../schemas/futureFormSchema';\nimport { FutureCalculationService } from '../services/futureCalculationService';\nconst initialFormData = {\n  symbol: '',\n  description: '',\n  isin: '',\n  expirationCode: '',\n  parentTicker: '',\n  fullName: '',\n  segment: '',\n  maturityDate: '',\n  firstTradingDate: '',\n  lastTraadingDate: '',\n  initialMarginAmount: 0,\n  percentageMargin: 0,\n  lotSize: 0,\n  contractMultiplier: 0,\n  tradingCurrency: '',\n  underlyingType: '',\n  underlyingId: 0,\n  settlementMethod: '',\n  instrumentStatus: false,\n  tickSize: 0,\n  tickValue: 0,\n  depositType: ''\n};\nexport const useFutureForm = () => {\n  _s();\n  const [state, setState] = useState({\n    form: initialFormData,\n    errors: {},\n    isSubmitting: false,\n    editMode: 'tickValue',\n    stringInputs: {\n      tickSize: '',\n      percentageMargin: '',\n      initialMarginAmount: ''\n    },\n    localInputs: {\n      tickValue: 0,\n      contractMultiplier: 0\n    }\n  });\n\n  // Update form field with real-time validation\n  const updateField = useCallback((field, value) => {\n    setState(prev => {\n      let error = '';\n\n      // Validation de base du champ\n      const basicError = validateField(field, value);\n      if (basicError) {\n        error = basicError;\n      } else {\n        // Validation spÃ©ciale pour les dates de trading\n        if (field === 'firstTradingDate' && prev.form.lastTraadingDate) {\n          const dateError = validateTradingDates(value, prev.form.lastTraadingDate);\n          if (dateError) error = dateError;\n        }\n        if (field === 'lastTraadingDate' && prev.form.firstTradingDate) {\n          const dateError = validateTradingDates(prev.form.firstTradingDate, value);\n          if (dateError) error = dateError;\n        }\n      }\n      return {\n        ...prev,\n        form: {\n          ...prev.form,\n          [field]: value\n        },\n        errors: {\n          ...prev.errors,\n          [field]: error\n        }\n      };\n    });\n  }, []);\n\n  // Update multiple fields at once with validation\n  const updateFields = useCallback(updates => {\n    setState(prev => {\n      const newForm = {\n        ...prev.form,\n        ...updates\n      };\n      const newErrors = {\n        ...prev.errors\n      };\n\n      // Clear errors for updated fields\n      Object.keys(updates).forEach(key => {\n        newErrors[key] = '';\n      });\n\n      // Special validation for trading dates\n      if (updates.firstTradingDate || updates.lastTraadingDate) {\n        const firstDate = updates.firstTradingDate || prev.form.firstTradingDate;\n        const lastDate = updates.lastTraadingDate || prev.form.lastTraadingDate;\n        if (firstDate && lastDate) {\n          const dateError = validateTradingDates(firstDate, lastDate);\n          if (dateError) {\n            // Show error on the lastTraadingDate field as per schema\n            newErrors.lastTraadingDate = dateError;\n          }\n        }\n      }\n      return {\n        ...prev,\n        form: newForm,\n        errors: newErrors\n      };\n    });\n  }, []);\n\n  // Update string inputs (for controlled inputs)\n  const updateStringInput = useCallback((field, value) => {\n    setState(prev => ({\n      ...prev,\n      stringInputs: {\n        ...prev.stringInputs,\n        [field]: value\n      }\n    }));\n  }, []);\n\n  // Update local inputs (for tick calculations)\n  const updateLocalInput = useCallback((field, value) => {\n    setState(prev => ({\n      ...prev,\n      localInputs: {\n        ...prev.localInputs,\n        [field]: value\n      }\n    }));\n  }, []);\n\n  // Change edit mode\n  const changeEditMode = useCallback(mode => {\n    setState(prev => ({\n      ...prev,\n      editMode: mode\n    }));\n  }, []);\n\n  // Validate single field\n  const validateSingleField = useCallback(field => {\n    const error = validateField(field, state.form[field]);\n    setState(prev => ({\n      ...prev,\n      errors: {\n        ...prev.errors,\n        [field]: error || ''\n      }\n    }));\n    return !error;\n  }, [state.form]);\n\n  // Validate entire form\n  const validateEntireForm = useCallback(() => {\n    const errors = validateForm(state.form);\n    setState(prev => ({\n      ...prev,\n      errors\n    }));\n    return Object.keys(errors).length === 0;\n  }, [state.form]);\n\n  // Handle tick size changes\n  const handleTickSizeChange = useCallback(value => {\n    updateStringInput('tickSize', value);\n    const tickSize = FutureCalculationService.parseTickSize(value);\n    if (tickSize > 0) {\n      const calculations = FutureCalculationService.updateTickCalculations(tickSize, state.editMode, state.localInputs.tickValue, state.localInputs.contractMultiplier);\n      updateFields({\n        tickSize,\n        ...calculations\n      });\n    } else {\n      updateFields({\n        tickSize: 0,\n        tickValue: 0,\n        contractMultiplier: 0\n      });\n    }\n  }, [state.editMode, state.localInputs, updateStringInput, updateFields]);\n\n  // Handle tick value changes\n  const handleTickValueChange = useCallback(value => {\n    updateLocalInput('tickValue', value);\n    if (state.form.tickSize > 0) {\n      const contractMultiplier = FutureCalculationService.calculateContractMultiplier(state.form.tickSize, value);\n      updateFields({\n        tickValue: value,\n        contractMultiplier\n      });\n    }\n  }, [state.form.tickSize, updateLocalInput, updateFields]);\n\n  // Handle contract multiplier changes\n  const handleContractMultiplierChange = useCallback(value => {\n    updateLocalInput('contractMultiplier', value);\n    if (state.form.tickSize > 0) {\n      const tickValue = FutureCalculationService.calculateTickValue(state.form.tickSize, value);\n      updateFields({\n        contractMultiplier: value,\n        tickValue\n      });\n    }\n  }, [state.form.tickSize, updateLocalInput, updateFields]);\n\n  // Handle percentage margin changes\n  const handlePercentageMarginChange = useCallback(value => {\n    updateStringInput('percentageMargin', value);\n    const percentageMargin = FutureCalculationService.parsePercentageMargin(value);\n    if (percentageMargin > 0 && state.form.lotSize > 0) {\n      const initialMarginAmount = FutureCalculationService.calculateInitialMarginAmount(state.form.lotSize, percentageMargin);\n      updateFields({\n        percentageMargin,\n        initialMarginAmount\n      });\n    }\n  }, [state.form.lotSize, updateStringInput, updateFields]);\n\n  // Handle initial margin amount changes\n  const handleInitialMarginAmountChange = useCallback(value => {\n    updateStringInput('initialMarginAmount', value);\n    const initialMarginAmount = FutureCalculationService.parseInitialMarginAmount(value);\n    if (initialMarginAmount > 0 && state.form.lotSize > 0) {\n      const percentageMargin = FutureCalculationService.calculatePercentageMargin(state.form.lotSize, initialMarginAmount);\n      updateFields({\n        initialMarginAmount,\n        percentageMargin\n      });\n    }\n  }, [state.form.lotSize, updateStringInput, updateFields]);\n\n  // Handle lot size changes\n  const handleLotSizeChange = useCallback(value => {\n    updateField('lotSize', value);\n    if (value > 0 && state.form.depositType) {\n      const calculations = FutureCalculationService.updateFormCalculations(state.form, state.form.depositType, value);\n      updateFields(calculations);\n    }\n  }, [state.form.depositType, updateField, updateFields]);\n\n  // Handle deposit type changes\n  const handleDepositTypeChange = useCallback(value => {\n    updateField('depositType', value);\n    if (value && state.form.lotSize > 0) {\n      const calculations = FutureCalculationService.updateFormCalculations(state.form, value, state.form.lotSize);\n      updateFields(calculations);\n    }\n  }, [state.form.lotSize, updateField, updateFields]);\n\n  // Handle underlying type changes\n  const handleUnderlyingTypeChange = useCallback(value => {\n    updateField('underlyingType', value);\n    updateField('underlyingId', 0); // Reset underlying asset when type changes\n  }, [updateField]);\n\n  // Set submitting state\n  const setSubmitting = useCallback(isSubmitting => {\n    setState(prev => ({\n      ...prev,\n      isSubmitting\n    }));\n  }, []);\n\n  // Reset form\n  const resetForm = useCallback(() => {\n    setState({\n      form: initialFormData,\n      errors: {},\n      isSubmitting: false,\n      editMode: 'tickValue',\n      stringInputs: {\n        tickSize: '',\n        percentageMargin: '',\n        initialMarginAmount: ''\n      },\n      localInputs: {\n        tickValue: 0,\n        contractMultiplier: 0\n      }\n    });\n  }, []);\n\n  // Sync string inputs with form values\n  useEffect(() => {\n    setState(prev => ({\n      ...prev,\n      stringInputs: {\n        tickSize: prev.form.tickSize > 0 ? prev.form.tickSize.toString() : '',\n        percentageMargin: prev.form.percentageMargin > 0 ? prev.form.percentageMargin.toString() : '',\n        initialMarginAmount: prev.form.initialMarginAmount > 0 ? prev.form.initialMarginAmount.toString() : ''\n      }\n    }));\n  }, [state.form.tickSize, state.form.percentageMargin, state.form.initialMarginAmount]);\n  return {\n    // State\n    form: state.form,\n    errors: state.errors,\n    isSubmitting: state.isSubmitting,\n    editMode: state.editMode,\n    stringInputs: state.stringInputs,\n    localInputs: state.localInputs,\n    // Actions\n    updateField,\n    updateFields,\n    updateStringInput,\n    updateLocalInput,\n    changeEditMode,\n    validateSingleField,\n    validateEntireForm,\n    handleTickSizeChange,\n    handleTickValueChange,\n    handleContractMultiplierChange,\n    handlePercentageMarginChange,\n    handleInitialMarginAmountChange,\n    handleLotSizeChange,\n    handleDepositTypeChange,\n    handleUnderlyingTypeChange,\n    setSubmitting,\n    resetForm\n  };\n};\n_s(useFutureForm, \"ZVu+w9RiuvEOfLzdW32wXesrRVI=\");","map":{"version":3,"names":["useState","useEffect","useCallback","validateField","validateForm","validateTradingDates","FutureCalculationService","initialFormData","symbol","description","isin","expirationCode","parentTicker","fullName","segment","maturityDate","firstTradingDate","lastTraadingDate","initialMarginAmount","percentageMargin","lotSize","contractMultiplier","tradingCurrency","underlyingType","underlyingId","settlementMethod","instrumentStatus","tickSize","tickValue","depositType","useFutureForm","_s","state","setState","form","errors","isSubmitting","editMode","stringInputs","localInputs","updateField","field","value","prev","error","basicError","dateError","updateFields","updates","newForm","newErrors","Object","keys","forEach","key","firstDate","lastDate","updateStringInput","updateLocalInput","changeEditMode","mode","validateSingleField","validateEntireForm","length","handleTickSizeChange","parseTickSize","calculations","updateTickCalculations","handleTickValueChange","calculateContractMultiplier","handleContractMultiplierChange","calculateTickValue","handlePercentageMarginChange","parsePercentageMargin","calculateInitialMarginAmount","handleInitialMarginAmountChange","parseInitialMarginAmount","calculatePercentageMargin","handleLotSizeChange","updateFormCalculations","handleDepositTypeChange","handleUnderlyingTypeChange","setSubmitting","resetForm","toString"],"sources":["C:/Users/chemseddine/Desktop/future_sur_taux/frontend/src/components/forms/FutureCreationForm/hooks/useFutureForm.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { FutureFormData, PartialFutureFormData, validateField, validateForm, validateTradingDates } from '../schemas/futureFormSchema';\r\nimport { FutureCalculationService } from '../services/futureCalculationService';\r\n\r\ninterface FormState {\r\n  form: FutureFormData;\r\n  errors: Record<string, string>;\r\n  isSubmitting: boolean;\r\n  editMode: 'tickValue' | 'contractMultiplier';\r\n  stringInputs: {\r\n    tickSize: string;\r\n    percentageMargin: string;\r\n    initialMarginAmount: string;\r\n  };\r\n  localInputs: {\r\n    tickValue: number;\r\n    contractMultiplier: number;\r\n  };\r\n}\r\n\r\nconst initialFormData: FutureFormData = {\r\n  symbol: '',\r\n  description: '',\r\n  isin: '',\r\n  expirationCode: '',\r\n  parentTicker: '',\r\n  fullName: '',\r\n  segment: '',\r\n  maturityDate: '',\r\n  firstTradingDate: '',\r\n  lastTraadingDate: '',\r\n  initialMarginAmount: 0,\r\n  percentageMargin: 0,\r\n  lotSize: 0,\r\n  contractMultiplier: 0,\r\n  tradingCurrency: '',\r\n  underlyingType: '',\r\n  underlyingId: 0,\r\n  settlementMethod: '',\r\n  instrumentStatus: false,\r\n  tickSize: 0,\r\n  tickValue: 0,\r\n  depositType: '',\r\n};\r\n\r\nexport const useFutureForm = () => {\r\n  const [state, setState] = useState<FormState>({\r\n    form: initialFormData,\r\n    errors: {},\r\n    isSubmitting: false,\r\n    editMode: 'tickValue',\r\n    stringInputs: {\r\n      tickSize: '',\r\n      percentageMargin: '',\r\n      initialMarginAmount: '',\r\n    },\r\n    localInputs: {\r\n      tickValue: 0,\r\n      contractMultiplier: 0,\r\n    },\r\n  });\r\n\r\n  // Update form field with real-time validation\r\n  const updateField = useCallback((field: keyof FutureFormData, value: any) => {\r\n    setState(prev => {\r\n      let error = '';\r\n      \r\n      // Validation de base du champ\r\n      const basicError = validateField(field, value);\r\n      if (basicError) {\r\n        error = basicError;\r\n      } else {\r\n        // Validation spÃ©ciale pour les dates de trading\r\n        if (field === 'firstTradingDate' && prev.form.lastTraadingDate) {\r\n          const dateError = validateTradingDates(value, prev.form.lastTraadingDate);\r\n          if (dateError) error = dateError;\r\n        }\r\n        \r\n        if (field === 'lastTraadingDate' && prev.form.firstTradingDate) {\r\n          const dateError = validateTradingDates(prev.form.firstTradingDate, value);\r\n          if (dateError) error = dateError;\r\n        }\r\n      }\r\n      \r\n      return {\r\n        ...prev,\r\n        form: { ...prev.form, [field]: value },\r\n        errors: { ...prev.errors, [field]: error }\r\n      };\r\n    });\r\n  }, []);\r\n\r\n  // Update multiple fields at once with validation\r\n  const updateFields = useCallback((updates: PartialFutureFormData) => {\r\n    setState(prev => {\r\n      const newForm = { ...prev.form, ...updates };\r\n      const newErrors = { ...prev.errors };\r\n      \r\n      // Clear errors for updated fields\r\n      Object.keys(updates).forEach(key => {\r\n        newErrors[key] = '';\r\n      });\r\n      \r\n      // Special validation for trading dates\r\n      if (updates.firstTradingDate || updates.lastTraadingDate) {\r\n        const firstDate = updates.firstTradingDate || prev.form.firstTradingDate;\r\n        const lastDate = updates.lastTraadingDate || prev.form.lastTraadingDate;\r\n        \r\n        if (firstDate && lastDate) {\r\n          const dateError = validateTradingDates(firstDate, lastDate);\r\n          if (dateError) {\r\n            // Show error on the lastTraadingDate field as per schema\r\n            newErrors.lastTraadingDate = dateError;\r\n          }\r\n        }\r\n      }\r\n      \r\n      return {\r\n        ...prev,\r\n        form: newForm,\r\n        errors: newErrors\r\n      };\r\n    });\r\n  }, []);\r\n\r\n  // Update string inputs (for controlled inputs)\r\n  const updateStringInput = useCallback((field: keyof FormState['stringInputs'], value: string) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      stringInputs: { ...prev.stringInputs, [field]: value }\r\n    }));\r\n  }, []);\r\n\r\n  // Update local inputs (for tick calculations)\r\n  const updateLocalInput = useCallback((field: keyof FormState['localInputs'], value: number) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      localInputs: { ...prev.localInputs, [field]: value }\r\n    }));\r\n  }, []);\r\n\r\n  // Change edit mode\r\n  const changeEditMode = useCallback((mode: 'tickValue' | 'contractMultiplier') => {\r\n    setState(prev => ({ ...prev, editMode: mode }));\r\n  }, []);\r\n\r\n  // Validate single field\r\n  const validateSingleField = useCallback((field: keyof FutureFormData) => {\r\n    const error = validateField(field, state.form[field]);\r\n    setState(prev => ({\r\n      ...prev,\r\n      errors: { ...prev.errors, [field]: error || '' }\r\n    }));\r\n    return !error;\r\n  }, [state.form]);\r\n\r\n  // Validate entire form\r\n  const validateEntireForm = useCallback(() => {\r\n    const errors = validateForm(state.form);\r\n    setState(prev => ({ ...prev, errors }));\r\n    return Object.keys(errors).length === 0;\r\n  }, [state.form]);\r\n\r\n  // Handle tick size changes\r\n  const handleTickSizeChange = useCallback((value: string) => {\r\n    updateStringInput('tickSize', value);\r\n    const tickSize = FutureCalculationService.parseTickSize(value);\r\n    \r\n    if (tickSize > 0) {\r\n      const calculations = FutureCalculationService.updateTickCalculations(\r\n        tickSize,\r\n        state.editMode,\r\n        state.localInputs.tickValue,\r\n        state.localInputs.contractMultiplier\r\n      );\r\n      \r\n      updateFields({\r\n        tickSize,\r\n        ...calculations\r\n      });\r\n    } else {\r\n      updateFields({ tickSize: 0, tickValue: 0, contractMultiplier: 0 });\r\n    }\r\n  }, [state.editMode, state.localInputs, updateStringInput, updateFields]);\r\n\r\n  // Handle tick value changes\r\n  const handleTickValueChange = useCallback((value: number) => {\r\n    updateLocalInput('tickValue', value);\r\n    \r\n    if (state.form.tickSize > 0) {\r\n      const contractMultiplier = FutureCalculationService.calculateContractMultiplier(state.form.tickSize, value);\r\n      updateFields({\r\n        tickValue: value,\r\n        contractMultiplier\r\n      });\r\n    }\r\n  }, [state.form.tickSize, updateLocalInput, updateFields]);\r\n\r\n  // Handle contract multiplier changes\r\n  const handleContractMultiplierChange = useCallback((value: number) => {\r\n    updateLocalInput('contractMultiplier', value);\r\n    \r\n    if (state.form.tickSize > 0) {\r\n      const tickValue = FutureCalculationService.calculateTickValue(state.form.tickSize, value);\r\n      updateFields({\r\n        contractMultiplier: value,\r\n        tickValue\r\n      });\r\n    }\r\n  }, [state.form.tickSize, updateLocalInput, updateFields]);\r\n\r\n  // Handle percentage margin changes\r\n  const handlePercentageMarginChange = useCallback((value: string) => {\r\n    updateStringInput('percentageMargin', value);\r\n    const percentageMargin = FutureCalculationService.parsePercentageMargin(value);\r\n    \r\n    if (percentageMargin > 0 && state.form.lotSize > 0) {\r\n      const initialMarginAmount = FutureCalculationService.calculateInitialMarginAmount(state.form.lotSize, percentageMargin);\r\n      updateFields({\r\n        percentageMargin,\r\n        initialMarginAmount\r\n      });\r\n    }\r\n  }, [state.form.lotSize, updateStringInput, updateFields]);\r\n\r\n  // Handle initial margin amount changes\r\n  const handleInitialMarginAmountChange = useCallback((value: string) => {\r\n    updateStringInput('initialMarginAmount', value);\r\n    const initialMarginAmount = FutureCalculationService.parseInitialMarginAmount(value);\r\n    \r\n    if (initialMarginAmount > 0 && state.form.lotSize > 0) {\r\n      const percentageMargin = FutureCalculationService.calculatePercentageMargin(state.form.lotSize, initialMarginAmount);\r\n      updateFields({\r\n        initialMarginAmount,\r\n        percentageMargin\r\n      });\r\n    }\r\n  }, [state.form.lotSize, updateStringInput, updateFields]);\r\n\r\n  // Handle lot size changes\r\n  const handleLotSizeChange = useCallback((value: number) => {\r\n    updateField('lotSize', value);\r\n    \r\n    if (value > 0 && state.form.depositType) {\r\n      const calculations = FutureCalculationService.updateFormCalculations(state.form, state.form.depositType, value);\r\n      updateFields(calculations);\r\n    }\r\n  }, [state.form.depositType, updateField, updateFields]);\r\n\r\n  // Handle deposit type changes\r\n  const handleDepositTypeChange = useCallback((value: string) => {\r\n    updateField('depositType', value);\r\n    \r\n    if (value && state.form.lotSize > 0) {\r\n      const calculations = FutureCalculationService.updateFormCalculations(state.form, value, state.form.lotSize);\r\n      updateFields(calculations);\r\n    }\r\n  }, [state.form.lotSize, updateField, updateFields]);\r\n\r\n  // Handle underlying type changes\r\n  const handleUnderlyingTypeChange = useCallback((value: string) => {\r\n    updateField('underlyingType', value);\r\n    updateField('underlyingId', 0); // Reset underlying asset when type changes\r\n  }, [updateField]);\r\n\r\n  // Set submitting state\r\n  const setSubmitting = useCallback((isSubmitting: boolean) => {\r\n    setState(prev => ({ ...prev, isSubmitting }));\r\n  }, []);\r\n\r\n  // Reset form\r\n  const resetForm = useCallback(() => {\r\n    setState({\r\n      form: initialFormData,\r\n      errors: {},\r\n      isSubmitting: false,\r\n      editMode: 'tickValue',\r\n      stringInputs: {\r\n        tickSize: '',\r\n        percentageMargin: '',\r\n        initialMarginAmount: '',\r\n      },\r\n      localInputs: {\r\n        tickValue: 0,\r\n        contractMultiplier: 0,\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  // Sync string inputs with form values\r\n  useEffect(() => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      stringInputs: {\r\n        tickSize: prev.form.tickSize > 0 ? prev.form.tickSize.toString() : '',\r\n        percentageMargin: prev.form.percentageMargin > 0 ? prev.form.percentageMargin.toString() : '',\r\n        initialMarginAmount: prev.form.initialMarginAmount > 0 ? prev.form.initialMarginAmount.toString() : '',\r\n      }\r\n    }));\r\n  }, [state.form.tickSize, state.form.percentageMargin, state.form.initialMarginAmount]);\r\n\r\n  return {\r\n    // State\r\n    form: state.form,\r\n    errors: state.errors,\r\n    isSubmitting: state.isSubmitting,\r\n    editMode: state.editMode,\r\n    stringInputs: state.stringInputs,\r\n    localInputs: state.localInputs,\r\n    \r\n    // Actions\r\n    updateField,\r\n    updateFields,\r\n    updateStringInput,\r\n    updateLocalInput,\r\n    changeEditMode,\r\n    validateSingleField,\r\n    validateEntireForm,\r\n    handleTickSizeChange,\r\n    handleTickValueChange,\r\n    handleContractMultiplierChange,\r\n    handlePercentageMarginChange,\r\n    handleInitialMarginAmountChange,\r\n    handleLotSizeChange,\r\n    handleDepositTypeChange,\r\n    handleUnderlyingTypeChange,\r\n    setSubmitting,\r\n    resetForm,\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}