{"ast":null,"code":"import{z}from'zod';// Base schema for the future creation form\nexport const futureFormSchema=z.object({// Identification fields\nsymbol:z.string().min(1,'Le symbole est requis'),description:z.string().optional(),isin:z.string().min(1,'Le code ISIN est requis'),expirationCode:z.string().optional(),parentTicker:z.string().optional(),fullName:z.string().min(1,'Le nom complet est requis'),segment:z.string().optional(),maturityDate:z.string().optional(),// Trading fields\nfirstTradingDate:z.string().min(1,'La date de première négociation est requise'),lastTraadingDate:z.string().min(1,'La date de dernière négociation est requise'),tradingCurrency:z.string().min(1,'La devise de négociation est requise'),settlementMethod:z.string().min(1,'La méthode de règlement est requise'),instrumentStatus:z.boolean(),// Financial fields\ninitialMarginAmount:z.number().min(0,'Le montant de marge initiale doit être positif'),percentageMargin:z.number().min(0,'Le pourcentage de marge doit être positif'),lotSize:z.number().positive('La taille de lot doit être supérieure à 0'),contractMultiplier:z.number().min(0,'Le multiplicateur de contrat doit être positif'),tickSize:z.number().positive('Le tick size doit être supérieur à 0'),tickValue:z.number().min(0,'La valeur du tick doit être positive'),// Underlying fields\nunderlyingType:z.string().min(1,'Le type de sous-jacent est requis'),underlyingId:z.number().positive('Le sous-jacent est requis'),depositType:z.string().min(1,'Le type de dépôt est requis')}).refine(data=>{// Validation personnalisée : date début < date fin\nif(data.firstTradingDate&&data.lastTraadingDate){const startDate=new Date(data.firstTradingDate);const endDate=new Date(data.lastTraadingDate);return startDate<endDate;}return true;// Si une des dates n'est pas encore saisie, on ne valide pas\n},{message:\"La date de début de négociation doit être antérieure à la date de fin de négociation\",path:[\"lastTraadingDate\"]// L'erreur sera affichée sur le champ date de fin\n});// Type inference from the schema\n// Partial type for form updates\n// Validation function for individual fields\nexport const validateField=(field,value)=>{try{futureFormSchema.pick({[field]:true}).parse({[field]:value});return null;}catch(error){var _error$errors,_error$errors$;return((_error$errors=error.errors)===null||_error$errors===void 0?void 0:(_error$errors$=_error$errors[0])===null||_error$errors$===void 0?void 0:_error$errors$.message)||'Validation failed';}};// Validation function for the entire form\nexport const validateForm=data=>{try{futureFormSchema.parse(data);return{};}catch(error){var _error$errors2;const errors={};(_error$errors2=error.errors)===null||_error$errors2===void 0?void 0:_error$errors2.forEach(err=>{var _err$path;if((_err$path=err.path)!==null&&_err$path!==void 0&&_err$path[0]){errors[err.path[0]]=err.message;}});return errors;}};// Validation spécifique pour les dates de trading\nexport const validateTradingDates=(firstDate,lastDate)=>{if(!firstDate||!lastDate){return null;// Pas d'erreur si une des dates n'est pas encore saisie\n}const startDate=new Date(firstDate);const endDate=new Date(lastDate);if(startDate>=endDate){return\"La date de début de négociation doit être antérieure à la date de fin de négociation\";}return null;};","map":{"version":3,"names":["z","futureFormSchema","object","symbol","string","min","description","optional","isin","expirationCode","parentTicker","fullName","segment","maturityDate","firstTradingDate","lastTraadingDate","tradingCurrency","settlementMethod","instrumentStatus","boolean","initialMarginAmount","number","percentageMargin","lotSize","positive","contractMultiplier","tickSize","tickValue","underlyingType","underlyingId","depositType","refine","data","startDate","Date","endDate","message","path","validateField","field","value","pick","parse","error","_error$errors","_error$errors$","errors","validateForm","_error$errors2","forEach","err","_err$path","validateTradingDates","firstDate","lastDate"],"sources":["C:/Users/chemseddine/Desktop/frontend/src/components/forms/FutureCreationForm/schemas/futureFormSchema.ts"],"sourcesContent":["import { z } from 'zod';\r\n\r\n// Base schema for the future creation form\r\nexport const futureFormSchema = z.object({\r\n  // Identification fields\r\n  symbol: z.string().min(1, 'Le symbole est requis'),\r\n  description: z.string().optional(),\r\n  isin: z.string().min(1, 'Le code ISIN est requis'),\r\n  expirationCode: z.string().optional(),\r\n  parentTicker: z.string().optional(),\r\n  fullName: z.string().min(1, 'Le nom complet est requis'),\r\n  segment: z.string().optional(),\r\n  maturityDate: z.string().optional(),\r\n  \r\n  // Trading fields\r\n  firstTradingDate: z.string().min(1, 'La date de première négociation est requise'),\r\n  lastTraadingDate: z.string().min(1, 'La date de dernière négociation est requise'),\r\n  tradingCurrency: z.string().min(1, 'La devise de négociation est requise'),\r\n  settlementMethod: z.string().min(1, 'La méthode de règlement est requise'),\r\n  instrumentStatus: z.boolean(),\r\n  \r\n  // Financial fields\r\n  initialMarginAmount: z.number().min(0, 'Le montant de marge initiale doit être positif'),\r\n  percentageMargin: z.number().min(0, 'Le pourcentage de marge doit être positif'),\r\n  lotSize: z.number().positive('La taille de lot doit être supérieure à 0'),\r\n  contractMultiplier: z.number().min(0, 'Le multiplicateur de contrat doit être positif'),\r\n  tickSize: z.number().positive('Le tick size doit être supérieur à 0'),\r\n  tickValue: z.number().min(0, 'La valeur du tick doit être positive'),\r\n  \r\n  // Underlying fields\r\n  underlyingType: z.string().min(1, 'Le type de sous-jacent est requis'),\r\n  underlyingId: z.number().positive('Le sous-jacent est requis'),\r\n  depositType: z.string().min(1, 'Le type de dépôt est requis'),\r\n}).refine((data) => {\r\n  // Validation personnalisée : date début < date fin\r\n  if (data.firstTradingDate && data.lastTraadingDate) {\r\n    const startDate = new Date(data.firstTradingDate);\r\n    const endDate = new Date(data.lastTraadingDate);\r\n    return startDate < endDate;\r\n  }\r\n  return true; // Si une des dates n'est pas encore saisie, on ne valide pas\r\n}, {\r\n  message: \"La date de début de négociation doit être antérieure à la date de fin de négociation\",\r\n  path: [\"lastTraadingDate\"], // L'erreur sera affichée sur le champ date de fin\r\n});\r\n\r\n// Type inference from the schema\r\nexport type FutureFormData = z.infer<typeof futureFormSchema>;\r\n\r\n// Partial type for form updates\r\nexport type PartialFutureFormData = Partial<FutureFormData>;\r\n\r\n// Validation function for individual fields\r\nexport const validateField = (field: keyof FutureFormData, value: any): string | null => {\r\n  try {\r\n    futureFormSchema.pick({ [field]: true }).parse({ [field]: value });\r\n    return null;\r\n  } catch (error: any) {\r\n    return error.errors?.[0]?.message || 'Validation failed';\r\n  }\r\n};\r\n\r\n// Validation function for the entire form\r\nexport const validateForm = (data: FutureFormData): Record<string, string> => {\r\n  try {\r\n    futureFormSchema.parse(data);\r\n    return {};\r\n  } catch (error: any) {\r\n    const errors: Record<string, string> = {};\r\n    error.errors?.forEach((err: any) => {\r\n      if (err.path?.[0]) {\r\n        errors[err.path[0]] = err.message;\r\n      }\r\n    });\r\n    return errors;\r\n  }\r\n};\r\n\r\n// Validation spécifique pour les dates de trading\r\nexport const validateTradingDates = (firstDate: string, lastDate: string): string | null => {\r\n  if (!firstDate || !lastDate) {\r\n    return null; // Pas d'erreur si une des dates n'est pas encore saisie\r\n  }\r\n  \r\n  const startDate = new Date(firstDate);\r\n  const endDate = new Date(lastDate);\r\n  \r\n  if (startDate >= endDate) {\r\n    return \"La date de début de négociation doit être antérieure à la date de fin de négociation\";\r\n  }\r\n  \r\n  return null;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}