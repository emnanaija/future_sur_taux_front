{"ast":null,"code":"import { z } from 'zod';\n\n// Base schema for the future creation form\nexport const futureFormSchema = z.object({\n  // Identification fields\n  symbol: z.string().min(1, 'Le symbole est requis'),\n  description: z.string().optional(),\n  isin: z.string().min(1, 'Le code ISIN est requis'),\n  expirationCode: z.string().optional(),\n  parentTicker: z.string().optional(),\n  fullName: z.string().min(1, 'Le nom complet est requis'),\n  segment: z.string().optional(),\n  maturityDate: z.string().optional(),\n  // Trading fields\n  firstTradingDate: z.string().min(1, 'La date de première négociation est requise'),\n  lastTraadingDate: z.string().min(1, 'La date de dernière négociation est requise'),\n  tradingCurrency: z.string().min(1, 'La devise de négociation est requise'),\n  settlementMethod: z.string().min(1, 'La méthode de règlement est requise'),\n  instrumentStatus: z.boolean(),\n  // Financial fields\n  initialMarginAmount: z.number().min(0, 'Le montant de marge initiale doit être positif'),\n  percentageMargin: z.number().min(0, 'Le pourcentage de marge doit être positif'),\n  lotSize: z.number().positive('La taille de lot doit être supérieure à 0'),\n  contractMultiplier: z.number().min(0, 'Le multiplicateur de contrat doit être positif'),\n  tickSize: z.number().positive('Le tick size doit être supérieur à 0'),\n  tickValue: z.number().min(0, 'La valeur du tick doit être positive'),\n  // Underlying fields\n  underlyingType: z.string().min(1, 'Le type de sous-jacent est requis'),\n  underlyingId: z.number().positive('Le sous-jacent est requis'),\n  depositType: z.string().min(1, 'Le type de dépôt est requis')\n}).refine(data => {\n  // Validation personnalisée : date début < date fin\n  if (data.firstTradingDate && data.lastTraadingDate) {\n    const startDate = new Date(data.firstTradingDate);\n    const endDate = new Date(data.lastTraadingDate);\n    return startDate < endDate;\n  }\n  return true; // Si une des dates n'est pas encore saisie, on ne valide pas\n}, {\n  message: \"La date de début de négociation doit être antérieure à la date de fin de négociation\",\n  path: [\"lastTraadingDate\"] // L'erreur sera affichée sur le champ date de fin\n});\n\n// Type inference from the schema\n\n// Partial type for form updates\n\n// Validation function for individual fields\nexport const validateField = (field, value) => {\n  try {\n    futureFormSchema.pick({\n      [field]: true\n    }).parse({\n      [field]: value\n    });\n    return null;\n  } catch (error) {\n    var _error$errors, _error$errors$;\n    return ((_error$errors = error.errors) === null || _error$errors === void 0 ? void 0 : (_error$errors$ = _error$errors[0]) === null || _error$errors$ === void 0 ? void 0 : _error$errors$.message) || 'Validation failed';\n  }\n};\n\n// Validation function for the entire form\nexport const validateForm = data => {\n  try {\n    futureFormSchema.parse(data);\n    return {};\n  } catch (error) {\n    var _error$errors2;\n    const errors = {};\n    (_error$errors2 = error.errors) === null || _error$errors2 === void 0 ? void 0 : _error$errors2.forEach(err => {\n      var _err$path;\n      if ((_err$path = err.path) !== null && _err$path !== void 0 && _err$path[0]) {\n        errors[err.path[0]] = err.message;\n      }\n    });\n    return errors;\n  }\n};","map":{"version":3,"names":["z","futureFormSchema","object","symbol","string","min","description","optional","isin","expirationCode","parentTicker","fullName","segment","maturityDate","firstTradingDate","lastTraadingDate","tradingCurrency","settlementMethod","instrumentStatus","boolean","initialMarginAmount","number","percentageMargin","lotSize","positive","contractMultiplier","tickSize","tickValue","underlyingType","underlyingId","depositType","refine","data","startDate","Date","endDate","message","path","validateField","field","value","pick","parse","error","_error$errors","_error$errors$","errors","validateForm","_error$errors2","forEach","err","_err$path"],"sources":["C:/Users/chemseddine/Desktop/future_sur_taux/frontend/src/components/forms/FutureCreationForm/schemas/futureFormSchema.ts"],"sourcesContent":["import { z } from 'zod';\r\n\r\n// Base schema for the future creation form\r\nexport const futureFormSchema = z.object({\r\n  // Identification fields\r\n  symbol: z.string().min(1, 'Le symbole est requis'),\r\n  description: z.string().optional(),\r\n  isin: z.string().min(1, 'Le code ISIN est requis'),\r\n  expirationCode: z.string().optional(),\r\n  parentTicker: z.string().optional(),\r\n  fullName: z.string().min(1, 'Le nom complet est requis'),\r\n  segment: z.string().optional(),\r\n  maturityDate: z.string().optional(),\r\n  \r\n  // Trading fields\r\n  firstTradingDate: z.string().min(1, 'La date de première négociation est requise'),\r\n  lastTraadingDate: z.string().min(1, 'La date de dernière négociation est requise'),\r\n  tradingCurrency: z.string().min(1, 'La devise de négociation est requise'),\r\n  settlementMethod: z.string().min(1, 'La méthode de règlement est requise'),\r\n  instrumentStatus: z.boolean(),\r\n  \r\n  // Financial fields\r\n  initialMarginAmount: z.number().min(0, 'Le montant de marge initiale doit être positif'),\r\n  percentageMargin: z.number().min(0, 'Le pourcentage de marge doit être positif'),\r\n  lotSize: z.number().positive('La taille de lot doit être supérieure à 0'),\r\n  contractMultiplier: z.number().min(0, 'Le multiplicateur de contrat doit être positif'),\r\n  tickSize: z.number().positive('Le tick size doit être supérieur à 0'),\r\n  tickValue: z.number().min(0, 'La valeur du tick doit être positive'),\r\n  \r\n  // Underlying fields\r\n  underlyingType: z.string().min(1, 'Le type de sous-jacent est requis'),\r\n  underlyingId: z.number().positive('Le sous-jacent est requis'),\r\n  depositType: z.string().min(1, 'Le type de dépôt est requis'),\r\n}).refine((data) => {\r\n  // Validation personnalisée : date début < date fin\r\n  if (data.firstTradingDate && data.lastTraadingDate) {\r\n    const startDate = new Date(data.firstTradingDate);\r\n    const endDate = new Date(data.lastTraadingDate);\r\n    return startDate < endDate;\r\n  }\r\n  return true; // Si une des dates n'est pas encore saisie, on ne valide pas\r\n}, {\r\n  message: \"La date de début de négociation doit être antérieure à la date de fin de négociation\",\r\n  path: [\"lastTraadingDate\"], // L'erreur sera affichée sur le champ date de fin\r\n});\r\n\r\n// Type inference from the schema\r\nexport type FutureFormData = z.infer<typeof futureFormSchema>;\r\n\r\n// Partial type for form updates\r\nexport type PartialFutureFormData = Partial<FutureFormData>;\r\n\r\n// Validation function for individual fields\r\nexport const validateField = (field: keyof FutureFormData, value: any): string | null => {\r\n  try {\r\n    futureFormSchema.pick({ [field]: true }).parse({ [field]: value });\r\n    return null;\r\n  } catch (error: any) {\r\n    return error.errors?.[0]?.message || 'Validation failed';\r\n  }\r\n};\r\n\r\n// Validation function for the entire form\r\nexport const validateForm = (data: FutureFormData): Record<string, string> => {\r\n  try {\r\n    futureFormSchema.parse(data);\r\n    return {};\r\n  } catch (error: any) {\r\n    const errors: Record<string, string> = {};\r\n    error.errors?.forEach((err: any) => {\r\n      if (err.path?.[0]) {\r\n        errors[err.path[0]] = err.message;\r\n      }\r\n    });\r\n    return errors;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}